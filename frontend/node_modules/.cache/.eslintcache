[{"/home/haresh/Desktop/services/frontend/src/index.js":"1","/home/haresh/Desktop/services/frontend/src/App.js":"2","/home/haresh/Desktop/services/frontend/src/pages/ProductDetail.js":"3","/home/haresh/Desktop/services/frontend/src/pages/customer/Login.js":"4","/home/haresh/Desktop/services/frontend/src/pages/Products.js":"5","/home/haresh/Desktop/services/frontend/src/pages/Cart.js":"6","/home/haresh/Desktop/services/frontend/src/pages/seller/Login.js":"7","/home/haresh/Desktop/services/frontend/src/pages/customer/Register.js":"8","/home/haresh/Desktop/services/frontend/src/pages/customer/Profile.js":"9","/home/haresh/Desktop/services/frontend/src/pages/seller/Register.js":"10","/home/haresh/Desktop/services/frontend/src/pages/seller/Dashboard.js":"11","/home/haresh/Desktop/services/frontend/src/pages/Home.js":"12","/home/haresh/Desktop/services/frontend/src/components/common/Header.js":"13","/home/haresh/Desktop/services/frontend/src/components/common/Footer.js":"14","/home/haresh/Desktop/services/frontend/src/pages/seller/AddProduct.js":"15","/home/haresh/Desktop/services/frontend/src/pages/seller/EditProduct.js":"16","/home/haresh/Desktop/services/frontend/src/components/common/ImageUploader.js":"17","/home/haresh/Desktop/services/frontend/src/components/common/MultiImageUploader.js":"18","/home/haresh/Desktop/services/frontend/src/components/seller/SellerLayout.js":"19","/home/haresh/Desktop/services/frontend/src/components/seller/SellerSidebar.js":"20","/home/haresh/Desktop/services/frontend/src/components/seller/SellerNavbar.js":"21","/home/haresh/Desktop/services/frontend/src/pages/seller/SellerApp.js":"22","/home/haresh/Desktop/services/frontend/src/pages/seller/ProductsList.js":"23","/home/haresh/Desktop/services/frontend/src/pages/seller/OrdersList.js":"24","/home/haresh/Desktop/services/frontend/src/pages/seller/Analytics.js":"25","/home/haresh/Desktop/services/frontend/src/pages/seller/Profile.js":"26","/home/haresh/Desktop/services/frontend/src/pages/seller/Settings.js":"27","/home/haresh/Desktop/services/frontend/src/components/common/SecureImage.js":"28"},{"size":167,"mtime":1754658831635,"results":"29","hashOfConfig":"30"},{"size":1778,"mtime":1754720309805,"results":"31","hashOfConfig":"30"},{"size":6606,"mtime":1754763455894,"results":"32","hashOfConfig":"30"},{"size":3268,"mtime":1754763647654,"results":"33","hashOfConfig":"30"},{"size":10959,"mtime":1754763427607,"results":"34","hashOfConfig":"30"},{"size":7933,"mtime":1754659190031,"results":"35","hashOfConfig":"30"},{"size":3387,"mtime":1754662088367,"results":"36","hashOfConfig":"30"},{"size":7006,"mtime":1754763666901,"results":"37","hashOfConfig":"30"},{"size":6810,"mtime":1754763681951,"results":"38","hashOfConfig":"30"},{"size":7423,"mtime":1754661576104,"results":"39","hashOfConfig":"30"},{"size":10636,"mtime":1754761508068,"results":"40","hashOfConfig":"30"},{"size":9160,"mtime":1754762775645,"results":"41","hashOfConfig":"30"},{"size":3523,"mtime":1754764035198,"results":"42","hashOfConfig":"30"},{"size":1154,"mtime":1754658964119,"results":"43","hashOfConfig":"30"},{"size":13002,"mtime":1754760346986,"results":"44","hashOfConfig":"30"},{"size":19652,"mtime":1754760351492,"results":"45","hashOfConfig":"30"},{"size":7057,"mtime":1754756499712,"results":"46","hashOfConfig":"30"},{"size":4153,"mtime":1754756539943,"results":"47","hashOfConfig":"30"},{"size":1128,"mtime":1754720230790,"results":"48","hashOfConfig":"30"},{"size":3114,"mtime":1754761491342,"results":"49","hashOfConfig":"30"},{"size":1976,"mtime":1754720712007,"results":"50","hashOfConfig":"30"},{"size":2018,"mtime":1754720750351,"results":"51","hashOfConfig":"30"},{"size":31905,"mtime":1754762004798,"results":"52","hashOfConfig":"30"},{"size":8754,"mtime":1754720380200,"results":"53","hashOfConfig":"30"},{"size":6658,"mtime":1754720410782,"results":"54","hashOfConfig":"30"},{"size":19112,"mtime":1754811682241,"results":"55","hashOfConfig":"30"},{"size":9594,"mtime":1754720471208,"results":"56","hashOfConfig":"30"},{"size":2054,"mtime":1754729486857,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"whr16f",{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"/home/haresh/Desktop/services/frontend/src/index.js",[],["123","124"],"/home/haresh/Desktop/services/frontend/src/App.js",[],"/home/haresh/Desktop/services/frontend/src/pages/ProductDetail.js",["125"],"import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Card, CardImg, CardBody, Button, Badge, Input, FormGroup, Label } from 'reactstrap';\nimport { useParams, useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst ProductDetail = () => {\n  const { id } = useParams();\n  const history = useHistory();\n  const [product, setProduct] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [quantity, setQuantity] = useState(1);\n  const [selectedImage, setSelectedImage] = useState(0);\n\n  useEffect(() => {\n    fetchProduct();\n  }, [id]);\n\n  const fetchProduct = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`/api/products/products/${id}`);\n      \n      if (response.data.success) {\n        setProduct(response.data.data);\n      } else {\n        toast.error('Product not found');\n        history.push('/products');\n      }\n    } catch (error) {\n      console.error('Error fetching product:', error);\n      toast.error('Failed to fetch product details');\n      history.push('/products');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addToCart = () => {\n    if (!product) return;\n    \n    const customerToken = localStorage.getItem('customerToken');\n    \n    if (!customerToken) {\n      toast.error('Please login to add items to cart');\n      return;\n    }\n    \n    const cartItems = JSON.parse(localStorage.getItem('cartItems') || '[]');\n    const existingItem = cartItems.find(item => item.id === product.id);\n    \n    if (existingItem) {\n      existingItem.quantity += quantity;\n    } else {\n      cartItems.push({ ...product, quantity });\n    }\n    \n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n    toast.success(`${quantity} item(s) added to cart!`);\n  };\n\n  const handleQuantityChange = (e) => {\n    const value = parseInt(e.target.value);\n    if (value > 0 && value <= product.stock) {\n      setQuantity(value);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Container className=\"py-5\">\n        <div className=\"loading-spinner\">\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      </Container>\n    );\n  }\n\n  if (!product) {\n    return (\n      <Container className=\"py-5\">\n        <div className=\"text-center\">\n          <h3>Product not found</h3>\n          <Button color=\"primary\" onClick={() => history.push('/products')}>\n            Back to Products\n          </Button>\n        </div>\n      </Container>\n    );\n  }\n\n  return (\n    <Container className=\"py-4\">\n      <Row>\n        <Col md=\"6\">\n          <Card>\n            <CardBody>\n              {product.images && product.images.length > 0 ? (\n                <>\n                  <CardImg \n                    top \n                    src={product.images[selectedImage]} \n                    alt={product.name}\n                    style={{ height: '400px', objectFit: 'cover', marginBottom: '15px' }}\n                  />\n                  {product.images.length > 1 && (\n                    <Row>\n                      {product.images.map((image, index) => (\n                        <Col xs=\"3\" key={index}>\n                          <img\n                            src={image}\n                            alt={`${product.name} ${index + 1}`}\n                            style={{ \n                              width: '100%', \n                              height: '60px', \n                              objectFit: 'cover',\n                              cursor: 'pointer',\n                              border: selectedImage === index ? '2px solid #007bff' : '1px solid #ddd'\n                            }}\n                            onClick={() => setSelectedImage(index)}\n                          />\n                        </Col>\n                      ))}\n                    </Row>\n                  )}\n                </>\n              ) : (\n                <div \n                  className=\"d-flex align-items-center justify-content-center bg-light\"\n                  style={{ height: '400px' }}\n                >\n                  <span className=\"text-muted\">No image available</span>\n                </div>\n              )}\n            </CardBody>\n          </Card>\n        </Col>\n\n        <Col md=\"6\">\n          <div>\n            <h2>{product.name}</h2>\n            \n            <div className=\"mb-3\">\n              <Badge color=\"secondary\" className=\"mr-2\">\n                {product.category}\n              </Badge>\n              {product.stock > 0 ? (\n                <Badge color=\"success\">In Stock ({product.stock})</Badge>\n              ) : (\n                <Badge color=\"danger\">Out of Stock</Badge>\n              )}\n            </div>\n\n            <h3 className=\"text-primary mb-3\">${product.price}</h3>\n\n            <p className=\"mb-4\">{product.description}</p>\n\n            {product.specifications && (\n              <div className=\"mb-4\">\n                <h5>Specifications</h5>\n                <ul>\n                  {Object.entries(product.specifications).map(([key, value]) => (\n                    <li key={key}>\n                      <strong>{key}:</strong> {value}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            {product.stock > 0 && (\n              <div className=\"mb-4\">\n                <Row>\n                  <Col md=\"6\">\n                    <FormGroup>\n                      <Label for=\"quantity\">Quantity</Label>\n                      <Input\n                        type=\"number\"\n                        id=\"quantity\"\n                        min=\"1\"\n                        max={product.stock}\n                        value={quantity}\n                        onChange={handleQuantityChange}\n                      />\n                    </FormGroup>\n                  </Col>\n                </Row>\n                \n                <Button \n                  color=\"success\" \n                  size=\"lg\" \n                  block\n                  onClick={addToCart}\n                >\n                  Add to Cart\n                </Button>\n              </div>\n            )}\n\n            <div className=\"mt-4\">\n              <Button \n                color=\"secondary\" \n                outline\n                onClick={() => history.push('/products')}\n              >\n                Back to Products\n              </Button>\n            </div>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default ProductDetail;","/home/haresh/Desktop/services/frontend/src/pages/customer/Login.js",[],"/home/haresh/Desktop/services/frontend/src/pages/Products.js",["126","127"],"import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Card, CardImg, CardBody, CardTitle, CardText, Button, Input, FormGroup, Label } from 'reactstrap';\nimport { Link, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport SecureImage from '../components/common/SecureImage';\n\nconst Products = () => {\n  const location = useLocation();\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [search, setSearch] = useState('');\n  const [category, setCategory] = useState('');\n  const [sortBy, setSortBy] = useState('name');\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n\n  useEffect(() => {\n    // Initialize search state from URL parameters\n    const urlParams = new URLSearchParams(location.search);\n    const searchParam = urlParams.get('search');\n    const categoryParam = urlParams.get('category');\n    \n    if (searchParam) {\n      setSearch(searchParam);\n    }\n    if (categoryParam) {\n      setCategory(categoryParam);\n    }\n  }, [location.search]);\n\n  useEffect(() => {\n    fetchProducts();\n  }, [search, category, sortBy, page]);\n\n  const fetchProducts = async () => {\n    try {\n      setLoading(true);\n      const params = {\n        page,\n        limit: 12,\n        sort: sortBy,\n        status: 'active', // Only show active products\n        ...(search && { search }),\n        ...(category && { category })\n      };\n\n      const response = await axios.get('/api/products/products', { params });\n      \n      if (response.data.success) {\n        setProducts(response.data.data || []);\n        setTotalPages(response.data.pagination?.pages || 1);\n      }\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      toast.error('Failed to fetch products');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addToCart = (product) => {\n    const customerToken = localStorage.getItem('customerToken');\n    \n    if (!customerToken) {\n      toast.error('Please login to add items to cart');\n      return;\n    }\n    \n    const cartItems = JSON.parse(localStorage.getItem('cartItems') || '[]');\n    const existingItem = cartItems.find(item => item.id === product.id);\n    \n    if (existingItem) {\n      existingItem.quantity += 1;\n    } else {\n      cartItems.push({ ...product, quantity: 1 });\n    }\n    \n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n    toast.success('Product added to cart!');\n  };\n\n  const handleSearchChange = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n  };\n\n  const handleCategoryChange = (e) => {\n    setCategory(e.target.value);\n    setPage(1);\n  };\n\n  const handleSortChange = (e) => {\n    setSortBy(e.target.value);\n    setPage(1);\n  };\n\n  return (\n    <Container className=\"py-4\">\n      <Row className=\"mb-4\">\n        <Col>\n          <h2>Products</h2>\n        </Col>\n      </Row>\n\n      <Row className=\"mb-4\">\n        <Col md=\"4\">\n          <FormGroup>\n            <Label for=\"search\">Search Products</Label>\n            <Input\n              type=\"text\"\n              id=\"search\"\n              placeholder=\"Search by name or description...\"\n              value={search}\n              onChange={handleSearchChange}\n            />\n          </FormGroup>\n        </Col>\n        <Col md=\"4\">\n          <FormGroup>\n            <Label for=\"category\">Category</Label>\n            <Input\n              type=\"select\"\n              id=\"category\"\n              value={category}\n              onChange={handleCategoryChange}\n            >\n              <option value=\"\">All Categories</option>\n              <option value=\"electronics\">Electronics</option>\n              <option value=\"clothing\">Clothing</option>\n              <option value=\"books\">Books</option>\n              <option value=\"home\">Home & Garden</option>\n              <option value=\"sports\">Sports</option>\n              <option value=\"beauty\">Beauty</option>\n            </Input>\n          </FormGroup>\n        </Col>\n        <Col md=\"4\">\n          <FormGroup>\n            <Label for=\"sort\">Sort By</Label>\n            <Input\n              type=\"select\"\n              id=\"sort\"\n              value={sortBy}\n              onChange={handleSortChange}\n            >\n              <option value=\"name\">Name</option>\n              <option value=\"price\">Price: Low to High</option>\n              <option value=\"-price\">Price: High to Low</option>\n              <option value=\"-createdAt\">Newest First</option>\n              <option value=\"createdAt\">Oldest First</option>\n            </Input>\n          </FormGroup>\n        </Col>\n      </Row>\n\n      {loading ? (\n        <div className=\"loading-spinner\">\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      ) : (\n        <>\n          <Row>\n            {products.map(product => (\n              <Col md=\"4\" lg=\"3\" key={product.id} className=\"mb-4\">\n                <Card className=\"product-card h-100\">\n                  <div style={{ height: '200px', position: 'relative', overflow: 'hidden' }}>\n                    {product.images && product.images.length > 0 ? (\n                      product.images[0].media_id ? (\n                        <SecureImage \n                          mediaId={product.images[0].media_id}\n                          alt={product.name}\n                          style={{ \n                            width: '100%', \n                            height: '100%', \n                            objectFit: 'cover',\n                            position: 'absolute',\n                            top: 0,\n                            left: 0\n                          }}\n                        />\n                      ) : product.images[0].url ? (\n                        <img \n                          src={product.images[0].url}\n                          alt={product.name}\n                          style={{ \n                            width: '100%', \n                            height: '100%', \n                            objectFit: 'cover',\n                            position: 'absolute',\n                            top: 0,\n                            left: 0\n                          }}\n                        />\n                      ) : (\n                        <div \n                          style={{ \n                            width: '100%', \n                            height: '100%', \n                            backgroundColor: '#f8f9fa',\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            color: '#6c757d',\n                            fontSize: '14px'\n                          }}\n                        >\n                          No Image\n                        </div>\n                      )\n                    ) : (\n                      <div \n                        style={{ \n                          width: '100%', \n                          height: '100%', \n                          backgroundColor: '#f8f9fa',\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'center',\n                          color: '#6c757d',\n                          fontSize: '14px'\n                        }}\n                      >\n                        No Image Available\n                      </div>\n                    )}\n                  </div>\n                  <CardBody className=\"d-flex flex-column\">\n                    <CardTitle tag=\"h6\">{product.name}</CardTitle>\n                    <CardText className=\"text-muted small\">\n                      {product.description?.substring(0, 100)}...\n                    </CardText>\n                    <CardText className=\"h6 text-primary\">\n                      ${product.price}\n                    </CardText>\n                    <CardText className=\"small text-muted\">\n                      Stock: {product.stock}\n                    </CardText>\n                    <div className=\"mt-auto\">\n                      <Button \n                        color=\"primary\" \n                        size=\"sm\" \n                        block\n                        tag={Link} \n                        to={`/product/${product.id}`}\n                        className=\"mb-2\"\n                      >\n                        View Details\n                      </Button>\n                      <Button \n                        color=\"success\" \n                        size=\"sm\" \n                        block\n                        onClick={() => addToCart(product)}\n                        disabled={product.stock === 0}\n                      >\n                        {product.stock === 0 ? 'Out of Stock' : 'Add to Cart'}\n                      </Button>\n                    </div>\n                  </CardBody>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n\n          {products.length === 0 && (\n            <Row>\n              <Col className=\"text-center py-5\">\n                <p className=\"lead\">No products found.</p>\n              </Col>\n            </Row>\n          )}\n\n          {totalPages > 1 && (\n            <Row>\n              <Col className=\"d-flex justify-content-center\">\n                <nav>\n                  <ul className=\"pagination\">\n                    <li className={`page-item ${page === 1 ? 'disabled' : ''}`}>\n                      <Button \n                        color=\"link\" \n                        className=\"page-link\"\n                        onClick={() => setPage(page - 1)}\n                        disabled={page === 1}\n                      >\n                        Previous\n                      </Button>\n                    </li>\n                    {[...Array(totalPages)].map((_, i) => (\n                      <li key={i} className={`page-item ${page === i + 1 ? 'active' : ''}`}>\n                        <Button \n                          color=\"link\" \n                          className=\"page-link\"\n                          onClick={() => setPage(i + 1)}\n                        >\n                          {i + 1}\n                        </Button>\n                      </li>\n                    ))}\n                    <li className={`page-item ${page === totalPages ? 'disabled' : ''}`}>\n                      <Button \n                        color=\"link\" \n                        className=\"page-link\"\n                        onClick={() => setPage(page + 1)}\n                        disabled={page === totalPages}\n                      >\n                        Next\n                      </Button>\n                    </li>\n                  </ul>\n                </nav>\n              </Col>\n            </Row>\n          )}\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default Products;","/home/haresh/Desktop/services/frontend/src/pages/Cart.js",[],"/home/haresh/Desktop/services/frontend/src/pages/seller/Login.js",[],"/home/haresh/Desktop/services/frontend/src/pages/customer/Register.js",[],"/home/haresh/Desktop/services/frontend/src/pages/customer/Profile.js",["128","129"],"import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Card, CardBody, Form, FormGroup, Label, Input, Button, Alert } from 'reactstrap';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst CustomerProfile = () => {\n  const [customer, setCustomer] = useState(null);\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    dateOfBirth: '',\n    gender: 'male'\n  });\n  const [loading, setLoading] = useState(true);\n  const [updating, setUpdating] = useState(false);\n  const [error, setError] = useState('');\n  const history = useHistory();\n\n  useEffect(() => {\n    const token = localStorage.getItem('customerToken');\n    if (!token) {\n      history.push('/customer/login');\n      return;\n    }\n    fetchCustomerProfile();\n  }, [history]);\n\n  const fetchCustomerProfile = async () => {\n    try {\n      const token = localStorage.getItem('customerToken');\n      const response = await axios.get('/api/customer/customers/profile', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      if (response.data.success) {\n        const customerData = response.data.data;\n        setCustomer(customerData);\n        setFormData({\n          firstName: customerData.firstName || '',\n          lastName: customerData.lastName || '',\n          email: customerData.email || '',\n          phone: customerData.phone || '',\n          dateOfBirth: customerData.dateOfBirth ? customerData.dateOfBirth.split('T')[0] : '',\n          gender: customerData.gender || 'male'\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      if (error.response?.status === 401) {\n        localStorage.removeItem('customerToken');\n        history.push('/customer/login');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n    if (error) setError('');\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setUpdating(true);\n    setError('');\n\n    try {\n      const token = localStorage.getItem('customerToken');\n      const response = await axios.put('/api/customer/customers/profile', formData, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      if (response.data.success) {\n        toast.success('Profile updated successfully!');\n        setCustomer(response.data.data);\n      }\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Failed to update profile.';\n      setError(errorMessage);\n      toast.error(errorMessage);\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Container className=\"py-5\">\n        <div className=\"loading-spinner\">\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      </Container>\n    );\n  }\n\n  return (\n    <Container className=\"py-5\">\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <Card>\n            <CardBody>\n              <h2 className=\"text-center mb-4\">My Profile</h2>\n              {error && <Alert color=\"danger\">{error}</Alert>}\n              \n              <Form onSubmit={handleSubmit}>\n                <Row>\n                  <Col md=\"6\">\n                    <FormGroup>\n                      <Label for=\"firstName\">First Name</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"firstName\"\n                        id=\"firstName\"\n                        value={formData.firstName}\n                        onChange={handleChange}\n                        required\n                      />\n                    </FormGroup>\n                  </Col>\n                  <Col md=\"6\">\n                    <FormGroup>\n                      <Label for=\"lastName\">Last Name</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"lastName\"\n                        id=\"lastName\"\n                        value={formData.lastName}\n                        onChange={handleChange}\n                        required\n                      />\n                    </FormGroup>\n                  </Col>\n                </Row>\n                \n                <FormGroup>\n                  <Label for=\"email\">Email</Label>\n                  <Input\n                    type=\"email\"\n                    name=\"email\"\n                    id=\"email\"\n                    value={formData.email}\n                    onChange={handleChange}\n                    disabled\n                  />\n                </FormGroup>\n                \n                <Row>\n                  <Col md=\"6\">\n                    <FormGroup>\n                      <Label for=\"phone\">Phone</Label>\n                      <Input\n                        type=\"tel\"\n                        name=\"phone\"\n                        id=\"phone\"\n                        value={formData.phone}\n                        onChange={handleChange}\n                        required\n                      />\n                    </FormGroup>\n                  </Col>\n                  <Col md=\"6\">\n                    <FormGroup>\n                      <Label for=\"gender\">Gender</Label>\n                      <Input\n                        type=\"select\"\n                        name=\"gender\"\n                        id=\"gender\"\n                        value={formData.gender}\n                        onChange={handleChange}\n                      >\n                        <option value=\"male\">Male</option>\n                        <option value=\"female\">Female</option>\n                        <option value=\"other\">Other</option>\n                      </Input>\n                    </FormGroup>\n                  </Col>\n                </Row>\n                \n                <FormGroup>\n                  <Label for=\"dateOfBirth\">Date of Birth</Label>\n                  <Input\n                    type=\"date\"\n                    name=\"dateOfBirth\"\n                    id=\"dateOfBirth\"\n                    value={formData.dateOfBirth}\n                    onChange={handleChange}\n                    required\n                  />\n                </FormGroup>\n                \n                <Button \n                  color=\"primary\" \n                  type=\"submit\" \n                  block \n                  disabled={updating}\n                >\n                  {updating ? 'Updating...' : 'Update Profile'}\n                </Button>\n              </Form>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default CustomerProfile;","/home/haresh/Desktop/services/frontend/src/pages/seller/Register.js",[],"/home/haresh/Desktop/services/frontend/src/pages/seller/Dashboard.js",["130"],"import React, { useState, useEffect } from 'react';\nimport { Row, Col, Card, CardBody, CardTitle, CardText, Button, Table, Badge } from 'reactstrap';\nimport { useHistory, Link } from 'react-router-dom';\nimport axios from 'axios';\n\nconst SellerDashboard = () => {\n  const [seller, setSeller] = useState(null);\n  const [products, setProducts] = useState([]);\n  const [orders, setOrders] = useState([]);\n  const [stats, setStats] = useState({\n    totalProducts: 0,\n    totalOrders: 0,\n    totalSales: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const history = useHistory();\n\n  useEffect(() => {\n    const token = localStorage.getItem('sellerToken');\n    console.log('Dashboard loading, token:', token ? 'exists' : 'missing');\n    if (!token) {\n      console.log('No token found, redirecting to login');\n      history.push('/seller/login');\n      return;\n    }\n    console.log('Token found, fetching dashboard data');\n    fetchDashboardData();\n  }, [history]);\n\n  const fetchDashboardData = async () => {\n    try {\n      const token = localStorage.getItem('sellerToken');\n      const headers = { Authorization: `Bearer ${token}` };\n      \n      const sellerData = JSON.parse(localStorage.getItem('sellerData')) || {};\n      let sellerId = sellerData.id;\n      \n      // Fallback: extract seller ID from JWT token if not in localStorage\n      if (!sellerId && token) {\n        try {\n          const tokenPayload = JSON.parse(atob(token.split('.')[1]));\n          sellerId = tokenPayload.id;\n          console.log('Dashboard: Extracted seller ID from JWT token:', sellerId);\n        } catch (e) {\n          console.error('Dashboard: Failed to extract seller ID from token:', e);\n        }\n      }\n      \n      // Debug: Always extract and log JWT token info for comparison\n      if (token) {\n        try {\n          const tokenPayload = JSON.parse(atob(token.split('.')[1]));\n          console.log('Dashboard: JWT token payload:', tokenPayload);\n          console.log('Dashboard: JWT seller ID:', tokenPayload.id);\n          console.log('Dashboard: localStorage seller ID:', sellerData.id);\n        } catch (e) {\n          console.error('Dashboard: Failed to parse JWT token for debugging:', e);\n        }\n      }\n      \n      console.log('Dashboard: sellerData:', sellerData);\n      console.log('Dashboard: sellerId:', sellerId);\n      console.log('Dashboard: expected alex.tech sellerId should be: 6895fc2fc8976794b14a5fce');\n      \n      if (!sellerId) {\n        console.error('Dashboard: No seller ID found in localStorage or token');\n        setProducts([]);\n        setStats(prev => ({ ...prev, totalProducts: 0 }));\n        setLoading(false);\n        return;\n      }\n      \n      const productsUrl = `/api/products/products/seller/${sellerId}?limit=10&status=active`;\n      console.log('Dashboard: Fetching products from:', productsUrl);\n      \n      const [sellerRes, productsRes, ordersRes] = await Promise.all([\n        axios.get('http://localhost:3002/api/v1/sellers/profile', { headers }),\n        axios.get(productsUrl, { headers }),\n        axios.get('/api/orders?sellerId=' + sellerId, { headers })\n      ]);\n\n      if (sellerRes.data.success) {\n        setSeller(sellerRes.data.data);\n      }\n\n      console.log('Dashboard: Products API response:', productsRes.data);\n      \n      if (productsRes.data.success) {\n        const products = productsRes.data.data.products || [];\n        console.log('Dashboard: Products fetched successfully:', products.length, 'products');\n        console.log('Dashboard: Product details:', products.map(p => ({ id: p.id, name: p.name, isActive: p.isActive })));\n        setProducts(products);\n        setStats(prev => ({\n          ...prev,\n          totalProducts: productsRes.data.data.summary?.total || products.length\n        }));\n      } else {\n        console.error('Dashboard: Failed to fetch products:', productsRes.data);\n        setProducts([]);\n      }\n\n      if (ordersRes.data.success) {\n        setOrders(ordersRes.data.data);\n        const totalSales = ordersRes.data.data\n          .filter(order => order.status === 'delivered')\n          .reduce((sum, order) => sum + order.totalAmount, 0);\n        \n        setStats(prev => ({\n          ...prev,\n          totalOrders: ordersRes.data.data.length,\n          totalSales\n        }));\n      }\n    } catch (error) {\n      console.error('Error fetching dashboard data:', error);\n      console.log('Error details:', error.response?.data);\n      if (error.response?.status === 401) {\n        console.log('401 error, removing token and redirecting');\n        localStorage.removeItem('sellerToken');\n        localStorage.removeItem('sellerData');\n        history.push('/seller/login');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'pending': return 'warning';\n      case 'confirmed': return 'info';\n      case 'shipped': return 'primary';\n      case 'delivered': return 'success';\n      case 'cancelled': return 'danger';\n      default: return 'secondary';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: '400px' }}>\n        <div className=\"spinner-border text-primary\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Row>\n        <Col>\n          <h2 className=\"mb-4\">Seller Dashboard</h2>\n          {seller && (\n            <p className=\"lead\">Welcome back, {seller.businessName}!</p>\n          )}\n        </Col>\n      </Row>\n\n      <Row className=\"mb-4\">\n        <Col md=\"4\">\n          <Card className=\"text-center\">\n            <CardBody>\n              <CardTitle tag=\"h5\">Total Products</CardTitle>\n              <CardText className=\"h3 text-primary\">\n                {stats.totalProducts}\n              </CardText>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col md=\"4\">\n          <Card className=\"text-center\">\n            <CardBody>\n              <CardTitle tag=\"h5\">Total Orders</CardTitle>\n              <CardText className=\"h3 text-info\">\n                {stats.totalOrders}\n              </CardText>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col md=\"4\">\n          <Card className=\"text-center\">\n            <CardBody>\n              <CardTitle tag=\"h5\">Total Sales</CardTitle>\n              <CardText className=\"h3 text-success\">\n                ${stats.totalSales.toFixed(2)}\n              </CardText>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col md=\"6\">\n          <Card>\n            <CardBody>\n              <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                <h5>Recent Products ({products.length > 0 ? `${products.length} active` : '0'})</h5>\n                <div>\n                  <Button color=\"outline-primary\" size=\"sm\" tag={Link} to=\"/seller/products\" className=\"mr-2\">\n                    View All\n                  </Button>\n                  <Button color=\"primary\" size=\"sm\" tag={Link} to=\"/seller/add-product\">\n                    Add Product\n                  </Button>\n                </div>\n              </div>\n              {products.length > 0 ? (\n                <Table responsive size=\"sm\">\n                  <thead>\n                    <tr>\n                      <th>Product Name</th>\n                      <th>Price</th>\n                      <th>Stock</th>\n                      <th>Status</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {products.slice(0, 5).map(product => (\n                      <tr key={product.id}>\n                        <td>\n                          <div>\n                            <strong>{product.name}</strong>\n                            <br />\n                            <small className=\"text-muted\">{product.category}</small>\n                          </div>\n                        </td>\n                        <td><strong>${product.price}</strong></td>\n                        <td>\n                          <Badge color={product.stock <= product.lowStockAlert ? 'warning' : 'success'}>\n                            {product.stock} units\n                          </Badge>\n                        </td>\n                        <td>\n                          <Badge color=\"success\">Active</Badge>\n                        </td>\n                        <td>\n                          <Button\n                            color=\"primary\"\n                            size=\"sm\"\n                            tag={Link}\n                            to={`/seller/edit-product/${product.id}`}\n                            className=\"btn-sm\"\n                          >\n                            Edit\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-4\">\n                  <p className=\"text-muted mb-3\">No active products found.</p>\n                  <Button color=\"primary\" size=\"sm\" tag={Link} to=\"/seller/add-product\">\n                    Add Your First Product\n                  </Button>\n                </div>\n              )}\n            </CardBody>\n          </Card>\n        </Col>\n\n        <Col md=\"6\">\n          <Card>\n            <CardBody>\n              <h5 className=\"mb-3\">Recent Orders</h5>\n              {orders.length > 0 ? (\n                <Table responsive size=\"sm\">\n                  <thead>\n                    <tr>\n                      <th>Order ID</th>\n                      <th>Amount</th>\n                      <th>Status</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {orders.slice(0, 5).map(order => (\n                      <tr key={order._id}>\n                        <td>{order._id.slice(-8)}</td>\n                        <td>${order.totalAmount}</td>\n                        <td>\n                          <Badge color={getStatusColor(order.status)}>\n                            {order.status}\n                          </Badge>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Table>\n              ) : (\n                <p className=\"text-muted\">No orders received yet.</p>\n              )}\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default SellerDashboard;","/home/haresh/Desktop/services/frontend/src/pages/Home.js",["131","132","133","134"],"import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Jumbotron, Button, Card, CardImg, CardBody, CardTitle, CardText, Form, FormGroup, Input, InputGroup, InputGroupAddon } from 'reactstrap';\nimport { Link, useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport SecureImage from '../components/common/SecureImage';\n\nconst Home = () => {\n  const [featuredProducts, setFeaturedProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const history = useHistory();\n\n  useEffect(() => {\n    fetchFeaturedProducts();\n  }, []);\n\n  const fetchFeaturedProducts = async () => {\n    try {\n      const response = await axios.get('/api/products/products?limit=6&status=active');\n      setFeaturedProducts(response.data.data || []);\n    } catch (error) {\n      console.error('Error fetching featured products:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      // Navigate to products page with search query\n      history.push(`/products?search=${encodeURIComponent(searchQuery.trim())}`);\n    }\n  };\n\n  const handleSearchInputChange = (e) => {\n    setSearchQuery(e.target.value);\n  };\n\n  return (\n    <div>\n      <Jumbotron className=\"bg-primary text-white\">\n        <Container>\n          <Row className=\"justify-content-center\">\n            <Col lg=\"8\" className=\"text-center\">\n              <h1 className=\"display-4 mb-4\">Welcome to E-Commerce Platform</h1>\n              <p className=\"lead mb-4\">\n                Discover amazing products from trusted sellers worldwide\n              </p>\n              \n              {/* Search Bar */}\n              <Form onSubmit={handleSearch} className=\"mb-4\">\n                <Row className=\"justify-content-center\">\n                  <Col md=\"8\" lg=\"6\">\n                    <div className=\"position-relative\">\n                      <Input\n                        type=\"text\"\n                        placeholder=\"Search for products...\"\n                        value={searchQuery}\n                        onChange={handleSearchInputChange}\n                        className=\"pr-5\"\n                        style={{\n                          borderRadius: '50px',\n                          padding: '12px 20px',\n                          fontSize: '16px',\n                          border: 'none'\n                        }}\n                      />\n                      <Button\n                        type=\"submit\"\n                        color=\"success\"\n                        className=\"position-absolute\"\n                        style={{\n                          right: '3px',\n                          top: '3px',\n                          bottom: '3px',\n                          borderRadius: '50px',\n                          minWidth: '80px'\n                        }}\n                      >\n                        <i className=\"fas fa-search\"></i>\n                      </Button>\n                    </div>\n                  </Col>\n                </Row>\n              </Form>\n              \n              <div>\n                <Button color=\"light\" size=\"lg\" tag={Link} to=\"/products\" className=\"mr-3\">\n                  Browse All Products\n                </Button>\n                <Button color=\"outline-light\" size=\"lg\" tag={Link} to=\"/seller/register\">\n                  Become a Seller\n                </Button>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <Row className=\"mb-5\">\n          <Col md=\"4\" className=\"text-center mb-4\">\n            <div className=\"mb-3\">\n              <i className=\"fas fa-shipping-fast fa-3x text-primary\"></i>\n            </div>\n            <h4>Fast Shipping</h4>\n            <p>Quick and reliable delivery to your doorstep</p>\n          </Col>\n          <Col md=\"4\" className=\"text-center mb-4\">\n            <div className=\"mb-3\">\n              <i className=\"fas fa-shield-alt fa-3x text-primary\"></i>\n            </div>\n            <h4>Secure Shopping</h4>\n            <p>Your data and transactions are always protected</p>\n          </Col>\n          <Col md=\"4\" className=\"text-center mb-4\">\n            <div className=\"mb-3\">\n              <i className=\"fas fa-headset fa-3x text-primary\"></i>\n            </div>\n            <h4>24/7 Support</h4>\n            <p>Get help whenever you need it</p>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <h2 className=\"text-center mb-4\">Featured Products</h2>\n            {loading ? (\n              <div className=\"loading-spinner\">\n                <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"sr-only\">Loading...</span>\n                </div>\n              </div>\n            ) : (\n              <Row>\n                {featuredProducts.map(product => (\n                  <Col md=\"4\" key={product.id} className=\"mb-4\">\n                    <Card className=\"product-card h-100\">\n                      <div style={{ height: '200px', position: 'relative', overflow: 'hidden' }}>\n                        {product.images && product.images.length > 0 ? (\n                          product.images[0].media_id ? (\n                            <SecureImage \n                              mediaId={product.images[0].media_id}\n                              alt={product.name}\n                              style={{ \n                                width: '100%', \n                                height: '100%', \n                                objectFit: 'cover',\n                                position: 'absolute',\n                                top: 0,\n                                left: 0\n                              }}\n                            />\n                          ) : product.images[0].url ? (\n                            <img \n                              src={product.images[0].url}\n                              alt={product.name}\n                              style={{ \n                                width: '100%', \n                                height: '100%', \n                                objectFit: 'cover',\n                                position: 'absolute',\n                                top: 0,\n                                left: 0\n                              }}\n                            />\n                          ) : (\n                            <div \n                              style={{ \n                                width: '100%', \n                                height: '100%', \n                                backgroundColor: '#f8f9fa',\n                                display: 'flex',\n                                alignItems: 'center',\n                                justifyContent: 'center',\n                                color: '#6c757d',\n                                fontSize: '14px'\n                              }}\n                            >\n                              No Image\n                            </div>\n                          )\n                        ) : (\n                          <div \n                            style={{ \n                              width: '100%', \n                              height: '100%', \n                              backgroundColor: '#f8f9fa',\n                              display: 'flex',\n                              alignItems: 'center',\n                              justifyContent: 'center',\n                              color: '#6c757d',\n                              fontSize: '14px'\n                            }}\n                          >\n                            No Image Available\n                          </div>\n                        )}\n                      </div>\n                      <CardBody className=\"d-flex flex-column\">\n                        <CardTitle tag=\"h5\">{product.name}</CardTitle>\n                        <CardText className=\"text-muted\">\n                          {product.description ? product.description.substring(0, 80) + '...' : 'No description available'}\n                        </CardText>\n                        <CardText className=\"h5 text-primary mt-auto\">\n                          ${product.price}\n                        </CardText>\n                        <Button \n                          color=\"primary\" \n                          tag={Link} \n                          to={`/product/${product.id}`}\n                        >\n                          View Details\n                        </Button>\n                      </CardBody>\n                    </Card>\n                  </Col>\n                ))}\n              </Row>\n            )}\n            {!loading && featuredProducts.length === 0 && (\n              <div className=\"text-center\">\n                <p>No products available at the moment.</p>\n                <Button color=\"primary\" tag={Link} to=\"/seller/register\">\n                  Become a Seller\n                </Button>\n              </div>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default Home;","/home/haresh/Desktop/services/frontend/src/components/common/Header.js",[],"/home/haresh/Desktop/services/frontend/src/components/common/Footer.js",[],"/home/haresh/Desktop/services/frontend/src/pages/seller/AddProduct.js",[],"/home/haresh/Desktop/services/frontend/src/pages/seller/EditProduct.js",["135","136","137"],"import React, { useState, useEffect } from 'react';\nimport { Row, Col, Card, CardBody, Form, FormGroup, Label, Input, Button, Alert } from 'reactstrap';\nimport { useHistory, useParams, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport ImageUploader from '../../components/common/ImageUploader';\nimport MultiImageUploader from '../../components/common/MultiImageUploader';\n\nconst EditProduct = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    price: '',\n    category: 'electronics',\n    stock: '',\n    specifications: ''\n  });\n  const [specifications, setSpecifications] = useState([\n    { title: '', detail: '' }\n  ]);\n  const [mainImage, setMainImage] = useState(null);\n  const [otherImages, setOtherImages] = useState([]);\n  const [mainImageIndex, setMainImageIndex] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [fetchingProduct, setFetchingProduct] = useState(true);\n  const [error, setError] = useState('');\n  const [originalMainImageId, setOriginalMainImageId] = useState(null);\n  const [originalOtherImageIds, setOriginalOtherImageIds] = useState([]);\n  const [deletedImageIds, setDeletedImageIds] = useState([]);\n  const history = useHistory();\n  const { id: productId } = useParams();\n\n  useEffect(() => {\n    fetchProduct();\n  }, [productId]);\n\n  const fetchProduct = async () => {\n    try {\n      const token = localStorage.getItem('sellerToken');\n      if (!token) {\n        history.push('/seller/login');\n        return;\n      }\n\n      const response = await axios.get(`/api/products/products/${productId}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      if (response.data.success) {\n        const product = response.data.data;\n        setFormData({\n          name: product.name || '',\n          description: product.description || '',\n          price: product.price || '',\n          category: product.category || 'electronics',\n          stock: product.stock || '',\n          specifications: product.specifications ? JSON.stringify(product.specifications, null, 2) : ''\n        });\n\n        // Convert specifications object to array format\n        if (product.specifications && typeof product.specifications === 'object') {\n          const specsArray = Object.entries(product.specifications).map(([title, detail]) => ({\n            title,\n            detail\n          }));\n          setSpecifications(specsArray.length > 0 ? specsArray : [{ title: '', detail: '' }]);\n        } else {\n          setSpecifications([{ title: '', detail: '' }]);\n        }\n\n        // Set images\n        if (product.images && product.images.length > 0) {\n          // Create image objects from backend image format\n          const imageObjects = product.images.map((image, index) => {\n            // Handle both old format (string URL) and new format (object with media_id)\n            if (typeof image === 'string') {\n              return {\n                id: `existing-${index}`,\n                url: image,\n                originalFilename: `image-${index + 1}.jpg`\n              };\n            } else if (image.media_id) {\n              return {\n                id: `existing-${index}`,\n                media_id: image.media_id,\n                url: `http://localhost:8000/media/${image.media_id}`,\n                originalFilename: `image-${index + 1}.jpg`,\n                isPrimary: image.isPrimary\n              };\n            } else if (image.url) {\n              return {\n                id: `existing-${index}`,\n                url: image.url,\n                originalFilename: `image-${index + 1}.jpg`,\n                isPrimary: image.isPrimary\n              };\n            }\n            return null;\n          }).filter(Boolean);\n          \n          setMainImage(imageObjects[0]);\n          setOriginalMainImageId(imageObjects[0].id);\n          \n          if (imageObjects.length > 1) {\n            setOtherImages(imageObjects.slice(1));\n            setOriginalOtherImageIds(imageObjects.slice(1).map(img => img.id));\n          } else {\n            setOriginalOtherImageIds([]);\n          }\n        } else {\n          setOriginalMainImageId(null);\n          setOriginalOtherImageIds([]);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching product:', error);\n      toast.error('Failed to fetch product details');\n      if (error.response?.status === 401) {\n        history.push('/seller/login');\n      }\n    } finally {\n      setFetchingProduct(false);\n    }\n  };\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n    if (error) setError('');\n  };\n\n  const handleSpecificationChange = (index, field, value) => {\n    const updatedSpecs = [...specifications];\n    updatedSpecs[index] = {\n      ...updatedSpecs[index],\n      [field]: value\n    };\n    setSpecifications(updatedSpecs);\n  };\n\n  const addSpecification = () => {\n    setSpecifications([...specifications, { title: '', detail: '' }]);\n  };\n\n  const removeSpecification = (index) => {\n    if (specifications.length > 1) {\n      const updatedSpecs = specifications.filter((_, i) => i !== index);\n      setSpecifications(updatedSpecs);\n    }\n  };\n\n  // Track when existing images are deleted\n  const handleMainImageRemove = () => {\n    if (mainImage && mainImage.id && mainImage.id.startsWith('existing-')) {\n      setDeletedImageIds(prev => [...prev, mainImage.id]);\n    }\n    setMainImage(null);\n  };\n\n  const handleOtherImagesChange = (newImages) => {\n    // Find deleted images by comparing with current otherImages\n    const currentIds = otherImages.map(img => img?.id).filter(Boolean);\n    const newIds = newImages.map(img => img?.id).filter(Boolean);\n    \n    const deletedIds = currentIds.filter(id => \n      id.startsWith('existing-') && !newIds.includes(id)\n    );\n    \n    if (deletedIds.length > 0) {\n      setDeletedImageIds(prev => [...prev, ...deletedIds]);\n    }\n    \n    setOtherImages(newImages);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    // Validation\n    if (!mainImage) {\n      setError('Please upload a main product image');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const token = localStorage.getItem('sellerToken');\n      if (!token) {\n        history.push('/seller/login');\n        return;\n      }\n\n      // Prepare images array for the API (media_id-based for secure architecture)\n      const images = [];\n      const allImageIds = [];\n      \n      if (mainImage) {\n        // Check if it's a new upload (has media_id) or existing image (has url)\n        if (mainImage.media_id) {\n          images.push({\n            media_id: mainImage.media_id,\n            isPrimary: true\n          });\n          allImageIds.push(mainImage.media_id);\n        } else if (mainImage.url) {\n          images.push({\n            url: mainImage.url,\n            isPrimary: true\n          });\n          if (mainImage.id) {\n            allImageIds.push(mainImage.id);\n          }\n        }\n      }\n      \n      otherImages.forEach(image => {\n        if (image) {\n          // Check if it's a new upload (has media_id) or existing image (has url)\n          if (image.media_id) {\n            images.push({\n              media_id: image.media_id,\n              isPrimary: false\n            });\n            allImageIds.push(image.media_id);\n          } else if (image.url) {\n            images.push({\n              url: image.url,\n              isPrimary: false\n            });\n            if (image.id) {\n              allImageIds.push(image.id);\n            }\n          }\n        }\n      });\n\n      // Prepare specifications object\n      const specsObject = {};\n      specifications.forEach(spec => {\n        if (spec.title.trim() && spec.detail.trim()) {\n          specsObject[spec.title.trim()] = spec.detail.trim();\n        }\n      });\n\n      // Prepare product data\n      const productData = {\n        ...formData,\n        price: parseFloat(formData.price),\n        stock: parseInt(formData.stock),\n        images: images,\n        specifications: specsObject\n      };\n\n      const response = await axios.put(`/api/products/products/${productId}`, productData, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      if (response.data.success) {\n        // Mark new images as used in media service (only newly uploaded images with media_id)\n        const newMediaIds = allImageIds.filter(id => \n          id && !id.startsWith('existing-') && id.match(/^[a-f\\d]{8}(-[a-f\\d]{4}){4}[a-f\\d]{8}$/i)\n        );\n        if (newMediaIds.length > 0) {\n          try {\n            await axios.post('http://localhost:8000/api/media/media/bulk-mark-used', {\n              ids: newMediaIds\n            });\n          } catch (mediaError) {\n            console.warn('Failed to mark images as used:', mediaError);\n            // Don't fail the product update if marking images fails\n          }\n        }\n\n        // Mark deleted images as not used so they can be cleaned up\n        if (deletedImageIds.length > 0) {\n          // Convert existing-X IDs back to actual media IDs\n          // Since we're using mock IDs for existing images, we need to handle this differently\n          // For now, we'll log this - in a real implementation, you'd need the actual media IDs\n          console.log('Images marked for deletion:', deletedImageIds);\n          \n          try {\n            // Note: This would need actual media IDs, not existing-X mock IDs\n            // You might need to store the actual media IDs when fetching the product\n            // For now, we'll skip this call since existing-X are not real UUIDs\n            // await axios.post('http://localhost:3003/api/v1/media/mark-not-used', {\n            //   ids: deletedImageIds\n            // });\n          } catch (mediaError) {\n            console.warn('Failed to mark deleted images as not used:', mediaError);\n          }\n        }\n\n        toast.success('Product updated successfully!');\n        history.push('/seller/products');\n      }\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Failed to update product. Please try again.';\n      setError(errorMessage);\n      toast.error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (fetchingProduct) {\n    return (\n      <div className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: '400px' }}>\n        <div className=\"text-center\">\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n          <p className=\"mt-2\">Loading product details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Row className=\"justify-content-center\">\n      <Col lg=\"10\" xl=\"8\">\n          <Card>\n            <CardBody>\n              <div className=\"d-flex justify-content-between align-items-center mb-4\">\n                <h2>Edit Product</h2>\n                <Button color=\"secondary\" outline tag={Link} to=\"/seller/dashboard\">\n                  Back to Dashboard\n                </Button>\n              </div>\n              \n              {error && <Alert color=\"danger\">{error}</Alert>}\n              \n              <Form onSubmit={handleSubmit}>\n                <Row>\n                  <Col md=\"8\">\n                    <FormGroup>\n                      <Label for=\"name\">Product Name *</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"name\"\n                        id=\"name\"\n                        placeholder=\"Enter product name\"\n                        value={formData.name}\n                        onChange={handleChange}\n                        required\n                      />\n                    </FormGroup>\n                  </Col>\n                  <Col md=\"4\">\n                    <FormGroup>\n                      <Label for=\"category\">Category *</Label>\n                      <Input\n                        type=\"select\"\n                        name=\"category\"\n                        id=\"category\"\n                        value={formData.category}\n                        onChange={handleChange}\n                        required\n                      >\n                        <option value=\"electronics\">Electronics</option>\n                        <option value=\"clothing\">Clothing</option>\n                        <option value=\"books\">Books</option>\n                        <option value=\"home\">Home & Garden</option>\n                        <option value=\"sports\">Sports</option>\n                        <option value=\"beauty\">Beauty</option>\n                        <option value=\"toys\">Toys</option>\n                        <option value=\"automotive\">Automotive</option>\n                      </Input>\n                    </FormGroup>\n                  </Col>\n                </Row>\n\n                <FormGroup>\n                  <Label for=\"description\">Description</Label>\n                  <Input\n                    type=\"textarea\"\n                    name=\"description\"\n                    id=\"description\"\n                    rows=\"4\"\n                    placeholder=\"Enter product description\"\n                    value={formData.description}\n                    onChange={handleChange}\n                  />\n                </FormGroup>\n\n                <Row>\n                  <Col md=\"6\">\n                    <FormGroup>\n                      <Label for=\"price\">Price * ($)</Label>\n                      <Input\n                        type=\"number\"\n                        name=\"price\"\n                        id=\"price\"\n                        placeholder=\"0.00\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        value={formData.price}\n                        onChange={handleChange}\n                        required\n                      />\n                    </FormGroup>\n                  </Col>\n                  <Col md=\"6\">\n                    <FormGroup>\n                      <Label for=\"stock\">Stock Quantity *</Label>\n                      <Input\n                        type=\"number\"\n                        name=\"stock\"\n                        id=\"stock\"\n                        placeholder=\"0\"\n                        min=\"0\"\n                        value={formData.stock}\n                        onChange={handleChange}\n                        required\n                      />\n                    </FormGroup>\n                  </Col>\n                </Row>\n\n                <FormGroup>\n                  <Label>Main Product Image *</Label>\n                  <ImageUploader\n                    currentImage={mainImage?.url}\n                    currentMediaId={mainImage?.media_id}\n                    onUpload={setMainImage}\n                    onRemove={handleMainImageRemove}\n                    uploadType=\"product\"\n                    accept=\"image/*\"\n                    maxSize={5 * 1024 * 1024}\n                    className=\"mb-3\"\n                  />\n                  <small className=\"text-muted\">Upload the main product image (Required)</small>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label>Additional Product Images</Label>\n                  <MultiImageUploader\n                    images={otherImages}\n                    onImagesChange={handleOtherImagesChange}\n                    maxImages={4}\n                    mainImageIndex={mainImageIndex}\n                    onMainImageChange={setMainImageIndex}\n                    className=\"mb-3\"\n                  />\n                  <small className=\"text-muted\">Upload up to 4 additional images (Optional)</small>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label>Product Specifications</Label>\n                  <div className=\"specifications-table\">\n                    <div className=\"table-responsive\">\n                      <table className=\"table table-bordered\">\n                        <thead className=\"bg-light\">\n                          <tr>\n                            <th>Title</th>\n                            <th>Detail</th>\n                            <th width=\"100\">Action</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {specifications.map((spec, index) => (\n                            <tr key={index}>\n                              <td>\n                                <Input\n                                  type=\"text\"\n                                  placeholder=\"e.g., Brand, Color, Size\"\n                                  value={spec.title}\n                                  onChange={(e) => handleSpecificationChange(index, 'title', e.target.value)}\n                                />\n                              </td>\n                              <td>\n                                <Input\n                                  type=\"text\"\n                                  placeholder=\"e.g., Apple, Red, Large\"\n                                  value={spec.detail}\n                                  onChange={(e) => handleSpecificationChange(index, 'detail', e.target.value)}\n                                />\n                              </td>\n                              <td>\n                                <div className=\"d-flex\">\n                                  {index === specifications.length - 1 && (\n                                    <Button\n                                      color=\"success\"\n                                      size=\"sm\"\n                                      className=\"mr-1\"\n                                      onClick={addSpecification}\n                                      type=\"button\"\n                                    >\n                                      +\n                                    </Button>\n                                  )}\n                                  {specifications.length > 1 && (\n                                    <Button\n                                      color=\"danger\"\n                                      size=\"sm\"\n                                      onClick={() => removeSpecification(index)}\n                                      type=\"button\"\n                                    >\n                                      ×\n                                    </Button>\n                                  )}\n                                </div>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                  <small className=\"text-muted\">Add product specifications as key-value pairs (optional)</small>\n                </FormGroup>\n\n                <hr />\n\n                <div className=\"d-flex justify-content-between\">\n                  <Button \n                    color=\"secondary\" \n                    outline\n                    tag={Link}\n                    to=\"/seller/dashboard\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    color=\"success\" \n                    type=\"submit\" \n                    disabled={loading}\n                    style={{ minWidth: '120px' }}\n                  >\n                    {loading ? 'Updating...' : 'Update Product'}\n                  </Button>\n                </div>\n              </Form>\n            </CardBody>\n          </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default EditProduct;","/home/haresh/Desktop/services/frontend/src/components/common/ImageUploader.js",[],"/home/haresh/Desktop/services/frontend/src/components/common/MultiImageUploader.js",[],"/home/haresh/Desktop/services/frontend/src/components/seller/SellerLayout.js",[],"/home/haresh/Desktop/services/frontend/src/components/seller/SellerSidebar.js",["138"],"import React, { useState, useEffect } from 'react';\nimport { Nav, NavItem, NavLink, Badge } from 'reactstrap';\nimport { useLocation, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport './SellerSidebar.css';\n\nconst SellerSidebar = ({ isOpen, refreshTrigger }) => {\n  const location = useLocation();\n  const [productCount, setProductCount] = useState(0);\n  const [orderCount, setOrderCount] = useState(0);\n\n  useEffect(() => {\n    fetchCounts();\n  }, [refreshTrigger]);\n\n  // Also refresh counts when location changes (user navigates)\n  useEffect(() => {\n    fetchCounts();\n  }, [location.pathname]);\n\n  const fetchCounts = async () => {\n    try {\n      const token = localStorage.getItem('sellerToken');\n      const sellerData = JSON.parse(localStorage.getItem('sellerData') || '{}');\n      \n      console.log('Sidebar: sellerData:', sellerData);\n      console.log('Sidebar: expected alex.tech sellerId should be: 6895fc2fc8976794b14a5fce');\n      \n      if (!token || !sellerData.id) {\n        return;\n      }\n\n      // Fetch products count\n      const productsResponse = await axios.get(`/api/products/products/seller/${sellerData.id}?status=active&limit=1`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      if (productsResponse.data.success) {\n        setProductCount(productsResponse.data.data.summary.active || 0);\n      }\n    } catch (error) {\n      console.error('Error fetching sidebar counts:', error);\n    }\n  };\n\n  const menuItems = [\n    {\n      path: '/seller/dashboard',\n      name: 'Dashboard',\n      icon: '📊',\n      badge: null\n    },\n    {\n      path: '/seller/products',\n      name: 'Products',\n      icon: '📦',\n      badge: productCount > 0 ? { text: productCount.toString(), color: 'primary' } : null\n    },\n    {\n      path: '/seller/add-product',\n      name: 'Add Product',\n      icon: '➕',\n      badge: null\n    },\n    {\n      path: '/seller/orders',\n      name: 'Orders',\n      icon: '📋',\n      badge: orderCount > 0 ? { text: orderCount.toString(), color: 'danger' } : null\n    },\n    {\n      path: '/seller/profile',\n      name: 'Profile',\n      icon: '👤',\n      badge: null\n    }\n  ];\n\n  return (\n    <div className={`seller-sidebar bg-dark ${isOpen ? 'sidebar-open' : 'sidebar-collapsed'}`}>\n      <Nav vertical className=\"py-3\">\n        {menuItems.map((item, index) => (\n          <NavItem key={index}>\n            <NavLink \n              tag={Link}\n              to={item.path}\n              className={`text-white sidebar-link ${location.pathname === item.path ? 'active' : ''}`}\n            >\n              <span className=\"sidebar-icon\">{item.icon}</span>\n              {isOpen && (\n                <>\n                  <span className=\"sidebar-text ml-2\">{item.name}</span>\n                  {item.badge && (\n                    <Badge color={item.badge.color} className=\"ml-auto\">\n                      {item.badge.text}\n                    </Badge>\n                  )}\n                </>\n              )}\n            </NavLink>\n          </NavItem>\n        ))}\n      </Nav>\n    </div>\n  );\n};\n\nexport default SellerSidebar;","/home/haresh/Desktop/services/frontend/src/components/seller/SellerNavbar.js",[],"/home/haresh/Desktop/services/frontend/src/pages/seller/SellerApp.js",[],"/home/haresh/Desktop/services/frontend/src/pages/seller/ProductsList.js",["139"],"import React, { useState, useEffect } from 'react';\nimport { \n  Table, Button, Card, CardBody, Badge, Input, InputGroup, InputGroupAddon, InputGroupText, \n  Row, Col, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label,\n  Progress, Alert, ButtonGroup, Dropdown, DropdownToggle, DropdownMenu, DropdownItem,\n  Nav, NavItem, NavLink, TabContent, TabPane\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport SecureImage from '../../components/common/SecureImage';\n\nconst ProductsList = () => {\n  const [products, setProducts] = useState([]);\n  const [summary, setSummary] = useState({});\n  const [pagination, setPagination] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState('active');\n  const [filterCategory, setFilterCategory] = useState('all');\n  const [sortBy, setSortBy] = useState('createdAt');\n  const [sortOrder, setSortOrder] = useState('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  \n  // Modals\n  const [stockModal, setStockModal] = useState(false);\n  const [historyModal, setHistoryModal] = useState(false);\n  const [analyticsModal, setAnalyticsModal] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState(null);\n  \n  // Stock management\n  const [newStock, setNewStock] = useState('');\n  const [stockNotes, setStockNotes] = useState('');\n  \n  // History data\n  const [productHistory, setProductHistory] = useState([]);\n  const [historyLoading, setHistoryLoading] = useState(false);\n  \n  // Analytics data\n  const [analytics, setAnalytics] = useState(null);\n  const [analyticsLoading, setAnalyticsLoading] = useState(false);\n  \n  // Delete loading state\n  const [deletingProducts, setDeletingProducts] = useState(new Set());\n  \n  // Dropdown states\n  const [actionsDropdown, setActionsDropdown] = useState({});\n  \n  // Active tab for history\n  const [activeTab, setActiveTab] = useState('all');\n\n  useEffect(() => {\n    fetchProducts();\n  }, [currentPage, filterStatus, sortBy, sortOrder]);\n\n  const fetchProducts = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('sellerToken');\n      const sellerData = JSON.parse(localStorage.getItem('sellerData') || '{}');\n      \n      console.log('ProductsList: sellerData:', sellerData);\n      console.log('ProductsList: expected alex.tech sellerId should be: 6895fc2fc8976794b14a5fce');\n      \n      if (!token || !sellerData.id) {\n        toast.error('Please login again');\n        return;\n      }\n      \n      const params = new URLSearchParams({\n        page: currentPage,\n        limit: 10,\n        status: filterStatus,\n        sortBy,\n        sortOrder\n      });\n      \n      const response = await axios.get(`/api/products/products/seller/${sellerData.id}?${params}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      if (response.data.success) {\n        setProducts(response.data.data.products || []);\n        setSummary(response.data.data.summary || {});\n        setPagination(response.data.data.pagination || {});\n      }\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      toast.error('Failed to load products');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchAnalytics = async () => {\n    try {\n      setAnalyticsLoading(true);\n      const token = localStorage.getItem('sellerToken');\n      const sellerData = JSON.parse(localStorage.getItem('sellerData') || '{}');\n      \n      const response = await axios.get(`/api/products/products/seller/${sellerData.id}/analytics?period=30`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      if (response.data.success) {\n        setAnalytics(response.data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching analytics:', error);\n      toast.error('Failed to load analytics');\n    } finally {\n      setAnalyticsLoading(false);\n    }\n  };\n\n  const fetchProductHistory = async (productId, type = 'all') => {\n    try {\n      setHistoryLoading(true);\n      const token = localStorage.getItem('sellerToken');\n      \n      const params = new URLSearchParams({\n        page: 1,\n        limit: 50,\n        type: type\n      });\n      \n      const response = await axios.get(`/api/products/products/${productId}/history?${params}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      if (response.data.success) {\n        setProductHistory(response.data.data.history || []);\n      }\n    } catch (error) {\n      console.error('Error fetching product history:', error);\n      toast.error('Failed to load product history');\n    } finally {\n      setHistoryLoading(false);\n    }\n  };\n\n  const handleDelete = async (productId) => {\n    // Prevent multiple delete requests for the same product\n    if (deletingProducts.has(productId)) {\n      return;\n    }\n    \n    if (window.confirm('Are you sure you want to delete this product? It will be moved to inactive status and hidden from the main view.')) {\n      try {\n        const token = localStorage.getItem('sellerToken');\n        if (!token) {\n          toast.error('Authentication required. Please login again.');\n          return;\n        }\n        \n        // Mark as deleting\n        setDeletingProducts(prev => new Set([...prev, productId]));\n        \n        await axios.delete(`/api/products/products/${productId}`, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        toast.success('Product deleted successfully (moved to inactive)');\n        fetchProducts();\n      } catch (error) {\n        console.error('Error deleting product:', error);\n        \n        // More detailed error handling\n        if (error.response) {\n          // Server responded with error status\n          const message = error.response.data?.message || 'Failed to delete product';\n          toast.error(`Delete failed: ${message}`);\n          console.error('Server error:', error.response.status, error.response.data);\n        } else if (error.request) {\n          // Request was made but no response received\n          toast.error('Network error: Unable to connect to server');\n          console.error('Network error:', error.request);\n        } else {\n          // Something else happened\n          toast.error('Unexpected error occurred');\n          console.error('Unexpected error:', error.message);\n        }\n      } finally {\n        // Remove from deleting set\n        setDeletingProducts(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(productId);\n          return newSet;\n        });\n      }\n    }\n  };\n\n  const handleUpdateStock = async () => {\n    try {\n      const token = localStorage.getItem('sellerToken');\n      await axios.put(`/api/products/products/${selectedProduct.id}/stock`, {\n        stock: parseInt(newStock),\n        notes: stockNotes\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      toast.success('Stock updated successfully');\n      setStockModal(false);\n      setNewStock('');\n      setStockNotes('');\n      fetchProducts();\n    } catch (error) {\n      console.error('Error updating stock:', error);\n      toast.error('Failed to update stock');\n    }\n  };\n\n  const openStockModal = (product) => {\n    setSelectedProduct(product);\n    setNewStock(product.stock.toString());\n    setStockModal(true);\n  };\n\n  const openHistoryModal = (product) => {\n    setSelectedProduct(product);\n    setHistoryModal(true);\n    fetchProductHistory(product.id, activeTab);\n  };\n\n  const openAnalyticsModal = () => {\n    setAnalyticsModal(true);\n    fetchAnalytics();\n  };\n\n  const toggleActionsDropdown = (productId) => {\n    setActionsDropdown(prev => ({\n      ...prev,\n      [productId]: !prev[productId]\n    }));\n  };\n\n  const getStockBadge = (stock, lowStockAlert = 5) => {\n    if (stock === 0) return <Badge color=\"danger\">Out of Stock</Badge>;\n    if (stock <= lowStockAlert) return <Badge color=\"warning\">Low Stock ({stock})</Badge>;\n    return <Badge color=\"success\">In Stock ({stock})</Badge>;\n  };\n\n  const getRevenueDisplay = (revenue) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(revenue || 0);\n  };\n\n  const filteredProducts = products.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                          product.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                          product.category?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = filterCategory === 'all' || product.category === filterCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getHistoryTypeIcon = (type) => {\n    const icons = {\n      sale: '🛒',\n      stock_add: '📈',\n      stock_reduce: '📉',\n      price_change: '💰',\n      status_change: '🔄'\n    };\n    return icons[type] || '📝';\n  };\n\n  const getHistoryTypeColor = (type) => {\n    const colors = {\n      sale: 'success',\n      stock_add: 'info',\n      stock_reduce: 'warning',\n      price_change: 'primary',\n      status_change: 'secondary'\n    };\n    return colors[type] || 'light';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: '400px' }}>\n        <div className=\"spinner-border text-primary\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {/* Header */}\n      <div className=\"d-flex justify-content-between align-items-center mb-4\">\n        <div>\n          <h2>Product Management</h2>\n          <div className=\"d-flex gap-3 mt-2\">\n            <Badge color=\"info\" pill className=\"p-2\">Total: {summary.total || 0}</Badge>\n            <Badge color=\"success\" pill className=\"p-2\">Active: {summary.active || 0}</Badge>\n            <Badge color=\"warning\" pill className=\"p-2\">Low Stock: {summary.lowStock || 0}</Badge>\n          </div>\n        </div>\n        <div>\n          <Button color=\"info\" onClick={openAnalyticsModal} className=\"mr-2\">\n            📊 Analytics\n          </Button>\n          <Button color=\"success\" tag={Link} to=\"/seller/add-product\">\n            ➕ Add Product\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-4\">\n        <CardBody>\n          <Row>\n            <Col md=\"4\">\n              <InputGroup>\n                <InputGroupAddon addonType=\"prepend\">\n                  <InputGroupText>🔍</InputGroupText>\n                </InputGroupAddon>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search products...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </InputGroup>\n            </Col>\n            <Col md=\"2\">\n              <Input\n                type=\"select\"\n                value={filterStatus}\n                onChange={(e) => {\n                  setFilterStatus(e.target.value);\n                  setCurrentPage(1);\n                }}\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"active\">Active</option>\n                <option value=\"inactive\">Inactive</option>\n              </Input>\n            </Col>\n            <Col md=\"2\">\n              <Input\n                type=\"select\"\n                value={filterCategory}\n                onChange={(e) => setFilterCategory(e.target.value)}\n              >\n                <option value=\"all\">All Categories</option>\n                <option value=\"electronics\">Electronics</option>\n                <option value=\"clothing\">Clothing</option>\n                <option value=\"books\">Books</option>\n                <option value=\"home\">Home & Garden</option>\n                <option value=\"sports\">Sports</option>\n                <option value=\"beauty\">Beauty</option>\n                <option value=\"toys\">Toys</option>\n                <option value=\"automotive\">Automotive</option>\n              </Input>\n            </Col>\n            <Col md=\"2\">\n              <Input\n                type=\"select\"\n                value={sortBy}\n                onChange={(e) => {\n                  setSortBy(e.target.value);\n                  setCurrentPage(1);\n                }}\n              >\n                <option value=\"createdAt\">Date Created</option>\n                <option value=\"name\">Name</option>\n                <option value=\"price\">Price</option>\n                <option value=\"stock\">Stock</option>\n                <option value=\"totalSold\">Total Sold</option>\n                <option value=\"revenue\">Revenue</option>\n              </Input>\n            </Col>\n            <Col md=\"2\">\n              <ButtonGroup>\n                <Button \n                  color={sortOrder === 'desc' ? 'primary' : 'outline-primary'}\n                  onClick={() => {\n                    setSortOrder('desc');\n                    setCurrentPage(1);\n                  }}\n                  size=\"sm\"\n                >\n                  ⬇ Desc\n                </Button>\n                <Button \n                  color={sortOrder === 'asc' ? 'primary' : 'outline-primary'}\n                  onClick={() => {\n                    setSortOrder('asc');\n                    setCurrentPage(1);\n                  }}\n                  size=\"sm\"\n                >\n                  ⬆ Asc\n                </Button>\n              </ButtonGroup>\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n\n      {/* Products Table */}\n      <Card>\n        <CardBody>\n          {filteredProducts.length > 0 ? (\n            <>\n              <Table responsive hover>\n                <thead>\n                  <tr>\n                    <th>Image</th>\n                    <th>Product Details</th>\n                    <th>Pricing</th>\n                    <th>Stock</th>\n                    <th>Performance</th>\n                    <th>Status</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredProducts.map(product => (\n                    <tr key={product.id}>\n                      <td>\n                        {product.images && product.images.length > 0 ? (\n                          <SecureImage\n                            mediaId={product.images.find(img => img.isPrimary)?.media_id || product.images[0]?.media_id}\n                            alt={product.name}\n                            style={{ width: '60px', height: '60px', objectFit: 'cover' }}\n                            className=\"rounded\"\n                            isThumb={true}\n                          />\n                        ) : (\n                          <div className=\"bg-light rounded d-flex align-items-center justify-content-center\" \n                               style={{ width: '60px', height: '60px' }}>\n                            📦\n                          </div>\n                        )}\n                      </td>\n                      <td>\n                        <div>\n                          <strong>{product.name}</strong>\n                          <br />\n                          <Badge color=\"secondary\" className=\"mr-1\">{product.category}</Badge>\n                          <br />\n                          <small className=\"text-muted\">ID: {product.id?.slice(-8)}</small>\n                        </div>\n                      </td>\n                      <td>\n                        <div>\n                          <strong>${product.price}</strong>\n                          <br />\n                          <small className=\"text-success\">Revenue: {getRevenueDisplay(product.revenue)}</small>\n                        </div>\n                      </td>\n                      <td>\n                        <div>\n                          {getStockBadge(product.stock, product.lowStockAlert)}\n                          <br />\n                          <small className=\"text-muted\">Alert: {product.lowStockAlert}</small>\n                        </div>\n                      </td>\n                      <td>\n                        <div>\n                          <Badge color=\"info\">Sold: {product.totalSold || 0}</Badge>\n                          <br />\n                          <small className=\"text-muted\">\n                            Created: {formatDate(product.createdAt)}\n                          </small>\n                        </div>\n                      </td>\n                      <td>\n                        {product.isActive ? (\n                          <Badge color=\"success\">Active</Badge>\n                        ) : (\n                          <Badge color=\"danger\">Inactive</Badge>\n                        )}\n                      </td>\n                      <td>\n                        <Dropdown \n                          isOpen={actionsDropdown[product.id] || false} \n                          toggle={() => toggleActionsDropdown(product.id)}\n                        >\n                          <DropdownToggle caret color=\"primary\" size=\"sm\">\n                            Actions\n                          </DropdownToggle>\n                          <DropdownMenu>\n                            <DropdownItem tag={Link} to={`/seller/edit-product/${product.id}`}>\n                              ✏️ Edit Product\n                            </DropdownItem>\n                            <DropdownItem onClick={() => openStockModal(product)}>\n                              📦 Manage Stock\n                            </DropdownItem>\n                            <DropdownItem onClick={() => openHistoryModal(product)}>\n                              📊 View History\n                            </DropdownItem>\n                            <DropdownItem divider />\n                            <DropdownItem \n                              onClick={() => handleDelete(product.id)} \n                              className=\"text-danger\"\n                              disabled={deletingProducts.has(product.id)}\n                            >\n                              {deletingProducts.has(product.id) ? '⏳ Deleting...' : '🗑️ Delete Product'}\n                            </DropdownItem>\n                          </DropdownMenu>\n                        </Dropdown>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n\n              {/* Pagination */}\n              {pagination.pages > 1 && (\n                <div className=\"d-flex justify-content-between align-items-center mt-3\">\n                  <div>\n                    Showing {((pagination.page - 1) * pagination.limit) + 1} to {Math.min(pagination.page * pagination.limit, pagination.total)} of {pagination.total} products\n                  </div>\n                  <ButtonGroup>\n                    <Button \n                      disabled={pagination.page === 1} \n                      onClick={() => setCurrentPage(pagination.page - 1)}\n                      size=\"sm\"\n                    >\n                      Previous\n                    </Button>\n                    {Array.from({ length: pagination.pages }, (_, i) => (\n                      <Button\n                        key={i + 1}\n                        color={pagination.page === i + 1 ? 'primary' : 'outline-primary'}\n                        onClick={() => setCurrentPage(i + 1)}\n                        size=\"sm\"\n                      >\n                        {i + 1}\n                      </Button>\n                    )).slice(Math.max(0, pagination.page - 3), pagination.page + 2)}\n                    <Button \n                      disabled={pagination.page === pagination.pages} \n                      onClick={() => setCurrentPage(pagination.page + 1)}\n                      size=\"sm\"\n                    >\n                      Next\n                    </Button>\n                  </ButtonGroup>\n                </div>\n              )}\n            </>\n          ) : (\n            <div className=\"text-center py-5\">\n              <h5 className=\"text-muted\">No products found</h5>\n              <p className=\"text-muted\">\n                {searchTerm || filterCategory !== 'all' || filterStatus !== 'all' \n                  ? 'Try adjusting your filters' \n                  : 'Start by adding your first product'\n                }\n              </p>\n              <Button color=\"success\" tag={Link} to=\"/seller/add-product\">\n                Add Product\n              </Button>\n            </div>\n          )}\n        </CardBody>\n      </Card>\n\n      {/* Stock Management Modal */}\n      <Modal isOpen={stockModal} toggle={() => setStockModal(false)}>\n        <ModalHeader toggle={() => setStockModal(false)}>\n          Manage Stock - {selectedProduct?.name}\n        </ModalHeader>\n        <ModalBody>\n          <Form>\n            <FormGroup>\n              <Label for=\"currentStock\">Current Stock</Label>\n              <Input\n                type=\"text\"\n                id=\"currentStock\"\n                value={selectedProduct?.stock || 0}\n                disabled\n                className=\"mb-2\"\n              />\n              <small className=\"text-muted\">Low stock alert: {selectedProduct?.lowStockAlert || 5}</small>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"newStock\">New Stock Quantity</Label>\n              <Input\n                type=\"number\"\n                id=\"newStock\"\n                value={newStock}\n                onChange={(e) => setNewStock(e.target.value)}\n                min=\"0\"\n                required\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"stockNotes\">Notes (Optional)</Label>\n              <Input\n                type=\"textarea\"\n                id=\"stockNotes\"\n                value={stockNotes}\n                onChange={(e) => setStockNotes(e.target.value)}\n                placeholder=\"Reason for stock change...\"\n              />\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"primary\" onClick={handleUpdateStock}>\n            Update Stock\n          </Button>\n          <Button color=\"secondary\" onClick={() => setStockModal(false)}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n\n      {/* Product History Modal */}\n      <Modal isOpen={historyModal} toggle={() => setHistoryModal(false)} size=\"lg\">\n        <ModalHeader toggle={() => setHistoryModal(false)}>\n          Product History - {selectedProduct?.name}\n        </ModalHeader>\n        <ModalBody>\n          <Nav tabs>\n            <NavItem>\n              <NavLink\n                className={activeTab === 'all' ? 'active' : ''}\n                onClick={() => {\n                  setActiveTab('all');\n                  if (selectedProduct) fetchProductHistory(selectedProduct.id, 'all');\n                }}\n                style={{ cursor: 'pointer' }}\n              >\n                All Activity\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink\n                className={activeTab === 'sale' ? 'active' : ''}\n                onClick={() => {\n                  setActiveTab('sale');\n                  if (selectedProduct) fetchProductHistory(selectedProduct.id, 'sale');\n                }}\n                style={{ cursor: 'pointer' }}\n              >\n                Sales\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink\n                className={activeTab === 'stock_add' ? 'active' : ''}\n                onClick={() => {\n                  setActiveTab('stock_add');\n                  if (selectedProduct) fetchProductHistory(selectedProduct.id, 'stock_add');\n                }}\n                style={{ cursor: 'pointer' }}\n              >\n                Stock Changes\n              </NavLink>\n            </NavItem>\n          </Nav>\n          \n          <TabContent activeTab={activeTab} className=\"mt-3\">\n            <TabPane tabId={activeTab}>\n              {historyLoading ? (\n                <div className=\"text-center p-4\">\n                  <div className=\"spinner-border text-primary\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                  </div>\n                </div>\n              ) : productHistory.length > 0 ? (\n                <div style={{ maxHeight: '400px', overflowY: 'auto' }}>\n                  {productHistory.map((entry, index) => (\n                    <Card key={index} className=\"mb-2\">\n                      <CardBody className=\"p-3\">\n                        <div className=\"d-flex justify-content-between align-items-start\">\n                          <div className=\"d-flex align-items-center\">\n                            <Badge color={getHistoryTypeColor(entry.type)} className=\"mr-2\">\n                              {getHistoryTypeIcon(entry.type)} {entry.type.replace('_', ' ').toUpperCase()}\n                            </Badge>\n                            <div>\n                              {entry.type === 'sale' && (\n                                <div>\n                                  <strong>Sale: {entry.quantity} units</strong>\n                                  {entry.metadata?.unitPrice && (\n                                    <small className=\"text-muted d-block\">\n                                      Unit Price: ${entry.metadata.unitPrice} | \n                                      Total: ${entry.metadata.totalPrice}\n                                    </small>\n                                  )}\n                                  {entry.orderId && (\n                                    <small className=\"text-muted d-block\">Order: {entry.orderId}</small>\n                                  )}\n                                </div>\n                              )}\n                              {(entry.type === 'stock_add' || entry.type === 'stock_reduce') && (\n                                <div>\n                                  <strong>Stock {entry.type === 'stock_add' ? 'Added' : 'Reduced'}: {entry.quantity} units</strong>\n                                  <small className=\"text-muted d-block\">\n                                    {entry.previousStock} → {entry.newStock}\n                                  </small>\n                                </div>\n                              )}\n                              {entry.notes && (\n                                <small className=\"text-info d-block\">Note: {entry.notes}</small>\n                              )}\n                            </div>\n                          </div>\n                          <small className=\"text-muted\">{formatDate(entry.createdAt)}</small>\n                        </div>\n                      </CardBody>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <Alert color=\"info\">No history found for this product.</Alert>\n              )}\n            </TabPane>\n          </TabContent>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={() => setHistoryModal(false)}>\n            Close\n          </Button>\n        </ModalFooter>\n      </Modal>\n\n      {/* Analytics Modal */}\n      <Modal isOpen={analyticsModal} toggle={() => setAnalyticsModal(false)} size=\"lg\">\n        <ModalHeader toggle={() => setAnalyticsModal(false)}>\n          Product Analytics (Last 30 Days)\n        </ModalHeader>\n        <ModalBody>\n          {analyticsLoading ? (\n            <div className=\"text-center p-4\">\n              <div className=\"spinner-border text-primary\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>\n            </div>\n          ) : analytics ? (\n            <div>\n              {/* Summary Cards */}\n              <Row className=\"mb-4\">\n                <Col md=\"3\">\n                  <Card className=\"text-center\">\n                    <CardBody>\n                      <h4 className=\"text-primary\">{analytics.summary.totalProducts}</h4>\n                      <small>Total Products</small>\n                    </CardBody>\n                  </Card>\n                </Col>\n                <Col md=\"3\">\n                  <Card className=\"text-center\">\n                    <CardBody>\n                      <h4 className=\"text-success\">{analytics.summary.totalSold}</h4>\n                      <small>Units Sold</small>\n                    </CardBody>\n                  </Card>\n                </Col>\n                <Col md=\"3\">\n                  <Card className=\"text-center\">\n                    <CardBody>\n                      <h4 className=\"text-info\">{getRevenueDisplay(analytics.summary.totalRevenue)}</h4>\n                      <small>Total Revenue</small>\n                    </CardBody>\n                  </Card>\n                </Col>\n                <Col md=\"3\">\n                  <Card className=\"text-center\">\n                    <CardBody>\n                      <h4 className=\"text-warning\">{analytics.summary.lowStockProducts}</h4>\n                      <small>Low Stock Items</small>\n                    </CardBody>\n                  </Card>\n                </Col>\n              </Row>\n\n              {/* Recent Sales */}\n              <h5>Recent Sales</h5>\n              {analytics.recentSales.length > 0 ? (\n                <Table size=\"sm\" className=\"mb-4\">\n                  <thead>\n                    <tr>\n                      <th>Date</th>\n                      <th>Quantity</th>\n                      <th>Revenue</th>\n                      <th>Order ID</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {analytics.recentSales.slice(0, 10).map((sale, index) => (\n                      <tr key={index}>\n                        <td>{formatDate(sale.createdAt)}</td>\n                        <td>{sale.quantity}</td>\n                        <td>${sale.metadata?.totalPrice}</td>\n                        <td><small>{sale.orderId}</small></td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Table>\n              ) : (\n                <Alert color=\"info\">No recent sales in the last 30 days.</Alert>\n              )}\n\n              {/* Sales by Category */}\n              <h5>Sales by Category</h5>\n              {analytics.salesByCategory.length > 0 ? (\n                <div>\n                  {analytics.salesByCategory.map((category, index) => (\n                    <div key={index} className=\"mb-3\">\n                      <div className=\"d-flex justify-content-between\">\n                        <span>{category.id}</span>\n                        <span>{category.totalSales} units | {getRevenueDisplay(category.totalRevenue)}</span>\n                      </div>\n                      <Progress \n                        value={(category.totalSales / Math.max(...analytics.salesByCategory.map(c => c.totalSales))) * 100} \n                        color=\"info\" \n                      />\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <Alert color=\"info\">No category sales data available.</Alert>\n              )}\n            </div>\n          ) : null}\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={() => setAnalyticsModal(false)}>\n            Close\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ProductsList;","/home/haresh/Desktop/services/frontend/src/pages/seller/OrdersList.js",[],"/home/haresh/Desktop/services/frontend/src/pages/seller/Analytics.js",["140","141","142"],"/home/haresh/Desktop/services/frontend/src/pages/seller/Profile.js",[],"/home/haresh/Desktop/services/frontend/src/pages/seller/Settings.js",["143"],"/home/haresh/Desktop/services/frontend/src/components/common/SecureImage.js",[],{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":17,"column":6,"nodeType":"150","endLine":17,"endColumn":10,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":2,"column":37,"nodeType":"154","messageId":"155","endLine":2,"endColumn":44},{"ruleId":"148","severity":1,"message":"156","line":34,"column":6,"nodeType":"150","endLine":34,"endColumn":38,"suggestions":"157"},{"ruleId":"152","severity":1,"message":"158","line":8,"column":10,"nodeType":"154","messageId":"155","endLine":8,"endColumn":18},{"ruleId":"148","severity":1,"message":"159","line":29,"column":6,"nodeType":"150","endLine":29,"endColumn":15,"suggestions":"160"},{"ruleId":"148","severity":1,"message":"161","line":28,"column":6,"nodeType":"150","endLine":28,"endColumn":15,"suggestions":"162"},{"ruleId":"152","severity":1,"message":"153","line":2,"column":56,"nodeType":"154","messageId":"155","endLine":2,"endColumn":63},{"ruleId":"152","severity":1,"message":"163","line":2,"column":102,"nodeType":"154","messageId":"155","endLine":2,"endColumn":111},{"ruleId":"152","severity":1,"message":"164","line":2,"column":120,"nodeType":"154","messageId":"155","endLine":2,"endColumn":130},{"ruleId":"152","severity":1,"message":"165","line":2,"column":132,"nodeType":"154","messageId":"155","endLine":2,"endColumn":147},{"ruleId":"152","severity":1,"message":"166","line":27,"column":10,"nodeType":"154","messageId":"155","endLine":27,"endColumn":29},{"ruleId":"152","severity":1,"message":"167","line":28,"column":10,"nodeType":"154","messageId":"155","endLine":28,"endColumn":31},{"ruleId":"148","severity":1,"message":"149","line":35,"column":6,"nodeType":"150","endLine":35,"endColumn":17,"suggestions":"168"},{"ruleId":"152","severity":1,"message":"169","line":10,"column":22,"nodeType":"154","messageId":"155","endLine":10,"endColumn":35},{"ruleId":"148","severity":1,"message":"156","line":54,"column":6,"nodeType":"150","endLine":54,"endColumn":52,"suggestions":"170"},{"ruleId":"152","severity":1,"message":"171","line":3,"column":8,"nodeType":"154","messageId":"155","endLine":3,"endColumn":13},{"ruleId":"152","severity":1,"message":"172","line":23,"column":13,"nodeType":"154","messageId":"155","endLine":23,"endColumn":18},{"ruleId":"152","severity":1,"message":"173","line":24,"column":13,"nodeType":"154","messageId":"155","endLine":24,"endColumn":21},{"ruleId":"152","severity":1,"message":"174","line":2,"column":86,"nodeType":"154","messageId":"155","endLine":2,"endColumn":91},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchProduct'. Either include it or remove the dependency array.","ArrayExpression",["177"],"no-unused-vars","'CardImg' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'fetchProducts'. Either include it or remove the dependency array.",["178"],"'customer' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchCustomerProfile'. Either include it or remove the dependency array.",["179"],"React Hook useEffect has a missing dependency: 'fetchDashboardData'. Either include it or remove the dependency array.",["180"],"'FormGroup' is defined but never used.","'InputGroup' is defined but never used.","'InputGroupAddon' is defined but never used.","'originalMainImageId' is assigned a value but never used.","'originalOtherImageIds' is assigned a value but never used.",["181"],"'setOrderCount' is assigned a value but never used.",["182"],"'axios' is defined but never used.","'token' is assigned a value but never used.","'sellerId' is assigned a value but never used.","'Alert' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},"Update the dependencies array to be: [fetchProduct, id]",{"range":"195","text":"196"},"Update the dependencies array to be: [search, category, sortBy, page, fetchProducts]",{"range":"197","text":"198"},"Update the dependencies array to be: [fetchCustomerProfile, history]",{"range":"199","text":"200"},"Update the dependencies array to be: [fetchDashboardData, history]",{"range":"201","text":"202"},"Update the dependencies array to be: [fetchProduct, productId]",{"range":"203","text":"204"},"Update the dependencies array to be: [currentPage, fetchProducts, filterStatus, sortBy, sortOrder]",{"range":"205","text":"206"},[631,635],"[fetchProduct, id]",[1183,1215],"[search, category, sortBy, page, fetchProducts]",[880,889],"[fetchCustomerProfile, history]",[960,969],"[fetchDashboardData, history]",[1365,1376],"[fetchProduct, productId]",[2103,2149],"[currentPage, fetchProducts, filterStatus, sortBy, sortOrder]"]