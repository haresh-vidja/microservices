[{"/home/haresh/Desktop/services/frontend/src/index.js":"1","/home/haresh/Desktop/services/frontend/src/App.js":"2","/home/haresh/Desktop/services/frontend/src/pages/ProductDetail.js":"3","/home/haresh/Desktop/services/frontend/src/pages/customer/Login.js":"4","/home/haresh/Desktop/services/frontend/src/pages/Products.js":"5","/home/haresh/Desktop/services/frontend/src/pages/Cart.js":"6","/home/haresh/Desktop/services/frontend/src/pages/seller/Login.js":"7","/home/haresh/Desktop/services/frontend/src/pages/customer/Register.js":"8","/home/haresh/Desktop/services/frontend/src/pages/customer/Profile.js":"9","/home/haresh/Desktop/services/frontend/src/pages/seller/Register.js":"10","/home/haresh/Desktop/services/frontend/src/pages/seller/Dashboard.js":"11","/home/haresh/Desktop/services/frontend/src/pages/Home.js":"12","/home/haresh/Desktop/services/frontend/src/components/common/Header.js":"13","/home/haresh/Desktop/services/frontend/src/components/common/Footer.js":"14","/home/haresh/Desktop/services/frontend/src/pages/seller/AddProduct.js":"15","/home/haresh/Desktop/services/frontend/src/pages/seller/EditProduct.js":"16","/home/haresh/Desktop/services/frontend/src/components/common/ImageUploader.js":"17","/home/haresh/Desktop/services/frontend/src/components/common/MultiImageUploader.js":"18","/home/haresh/Desktop/services/frontend/src/components/seller/SellerLayout.js":"19","/home/haresh/Desktop/services/frontend/src/components/seller/SellerSidebar.js":"20","/home/haresh/Desktop/services/frontend/src/components/seller/SellerNavbar.js":"21","/home/haresh/Desktop/services/frontend/src/pages/seller/SellerApp.js":"22","/home/haresh/Desktop/services/frontend/src/pages/seller/ProductsList.js":"23","/home/haresh/Desktop/services/frontend/src/pages/seller/OrdersList.js":"24","/home/haresh/Desktop/services/frontend/src/pages/seller/Analytics.js":"25","/home/haresh/Desktop/services/frontend/src/pages/seller/Profile.js":"26","/home/haresh/Desktop/services/frontend/src/pages/seller/Settings.js":"27","/home/haresh/Desktop/services/frontend/src/components/common/SecureImage.js":"28"},{"size":167,"mtime":1754658831635,"results":"29","hashOfConfig":"30"},{"size":1778,"mtime":1754720309805,"results":"31","hashOfConfig":"30"},{"size":6431,"mtime":1754671416686,"results":"32","hashOfConfig":"30"},{"size":3258,"mtime":1754659333088,"results":"33","hashOfConfig":"30"},{"size":8108,"mtime":1754671406545,"results":"34","hashOfConfig":"30"},{"size":7933,"mtime":1754659190031,"results":"35","hashOfConfig":"30"},{"size":3387,"mtime":1754662088367,"results":"36","hashOfConfig":"30"},{"size":6996,"mtime":1754659336766,"results":"37","hashOfConfig":"30"},{"size":6790,"mtime":1754659043555,"results":"38","hashOfConfig":"30"},{"size":7423,"mtime":1754661576104,"results":"39","hashOfConfig":"30"},{"size":7409,"mtime":1754720492654,"results":"40","hashOfConfig":"30"},{"size":4297,"mtime":1754671392861,"results":"41","hashOfConfig":"30"},{"size":2577,"mtime":1754658954648,"results":"42","hashOfConfig":"30"},{"size":1154,"mtime":1754658964119,"results":"43","hashOfConfig":"30"},{"size":12978,"mtime":1754725649414,"results":"44","hashOfConfig":"30"},{"size":17950,"mtime":1754720516224,"results":"45","hashOfConfig":"30"},{"size":7050,"mtime":1754723713536,"results":"46","hashOfConfig":"30"},{"size":4146,"mtime":1754723725577,"results":"47","hashOfConfig":"30"},{"size":1128,"mtime":1754720230790,"results":"48","hashOfConfig":"30"},{"size":1811,"mtime":1754720739876,"results":"49","hashOfConfig":"30"},{"size":1976,"mtime":1754720712007,"results":"50","hashOfConfig":"30"},{"size":2018,"mtime":1754720750351,"results":"51","hashOfConfig":"30"},{"size":30099,"mtime":1754726197351,"results":"52","hashOfConfig":"30"},{"size":8754,"mtime":1754720380200,"results":"53","hashOfConfig":"30"},{"size":6658,"mtime":1754720410782,"results":"54","hashOfConfig":"30"},{"size":7054,"mtime":1754720436795,"results":"55","hashOfConfig":"30"},{"size":9594,"mtime":1754720471208,"results":"56","hashOfConfig":"30"},{"size":2054,"mtime":1754723760927,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"whr16f",{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/haresh/Desktop/services/frontend/src/index.js",[],["121","122"],"/home/haresh/Desktop/services/frontend/src/App.js",[],"/home/haresh/Desktop/services/frontend/src/pages/ProductDetail.js",["123"],"import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Card, CardImg, CardBody, Button, Badge, Input, FormGroup, Label } from 'reactstrap';\nimport { useParams, useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst ProductDetail = () => {\n  const { id } = useParams();\n  const history = useHistory();\n  const [product, setProduct] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [quantity, setQuantity] = useState(1);\n  const [selectedImage, setSelectedImage] = useState(0);\n\n  useEffect(() => {\n    fetchProduct();\n  }, [id]);\n\n  const fetchProduct = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`/api/products/products/${id}`);\n      \n      if (response.data.success) {\n        setProduct(response.data.data);\n      } else {\n        toast.error('Product not found');\n        history.push('/products');\n      }\n    } catch (error) {\n      console.error('Error fetching product:', error);\n      toast.error('Failed to fetch product details');\n      history.push('/products');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addToCart = () => {\n    if (!product) return;\n    \n    const cartItems = JSON.parse(localStorage.getItem('cartItems') || '[]');\n    const existingItem = cartItems.find(item => item._id === product._id);\n    \n    if (existingItem) {\n      existingItem.quantity += quantity;\n    } else {\n      cartItems.push({ ...product, quantity });\n    }\n    \n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n    toast.success(`${quantity} item(s) added to cart!`);\n  };\n\n  const handleQuantityChange = (e) => {\n    const value = parseInt(e.target.value);\n    if (value > 0 && value <= product.stock) {\n      setQuantity(value);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Container className=\"py-5\">\n        <div className=\"loading-spinner\">\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      </Container>\n    );\n  }\n\n  if (!product) {\n    return (\n      <Container className=\"py-5\">\n        <div className=\"text-center\">\n          <h3>Product not found</h3>\n          <Button color=\"primary\" onClick={() => history.push('/products')}>\n            Back to Products\n          </Button>\n        </div>\n      </Container>\n    );\n  }\n\n  return (\n    <Container className=\"py-4\">\n      <Row>\n        <Col md=\"6\">\n          <Card>\n            <CardBody>\n              {product.images && product.images.length > 0 ? (\n                <>\n                  <CardImg \n                    top \n                    src={product.images[selectedImage]} \n                    alt={product.name}\n                    style={{ height: '400px', objectFit: 'cover', marginBottom: '15px' }}\n                  />\n                  {product.images.length > 1 && (\n                    <Row>\n                      {product.images.map((image, index) => (\n                        <Col xs=\"3\" key={index}>\n                          <img\n                            src={image}\n                            alt={`${product.name} ${index + 1}`}\n                            style={{ \n                              width: '100%', \n                              height: '60px', \n                              objectFit: 'cover',\n                              cursor: 'pointer',\n                              border: selectedImage === index ? '2px solid #007bff' : '1px solid #ddd'\n                            }}\n                            onClick={() => setSelectedImage(index)}\n                          />\n                        </Col>\n                      ))}\n                    </Row>\n                  )}\n                </>\n              ) : (\n                <div \n                  className=\"d-flex align-items-center justify-content-center bg-light\"\n                  style={{ height: '400px' }}\n                >\n                  <span className=\"text-muted\">No image available</span>\n                </div>\n              )}\n            </CardBody>\n          </Card>\n        </Col>\n\n        <Col md=\"6\">\n          <div>\n            <h2>{product.name}</h2>\n            \n            <div className=\"mb-3\">\n              <Badge color=\"secondary\" className=\"mr-2\">\n                {product.category}\n              </Badge>\n              {product.stock > 0 ? (\n                <Badge color=\"success\">In Stock ({product.stock})</Badge>\n              ) : (\n                <Badge color=\"danger\">Out of Stock</Badge>\n              )}\n            </div>\n\n            <h3 className=\"text-primary mb-3\">${product.price}</h3>\n\n            <p className=\"mb-4\">{product.description}</p>\n\n            {product.specifications && (\n              <div className=\"mb-4\">\n                <h5>Specifications</h5>\n                <ul>\n                  {Object.entries(product.specifications).map(([key, value]) => (\n                    <li key={key}>\n                      <strong>{key}:</strong> {value}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            {product.stock > 0 && (\n              <div className=\"mb-4\">\n                <Row>\n                  <Col md=\"6\">\n                    <FormGroup>\n                      <Label for=\"quantity\">Quantity</Label>\n                      <Input\n                        type=\"number\"\n                        id=\"quantity\"\n                        min=\"1\"\n                        max={product.stock}\n                        value={quantity}\n                        onChange={handleQuantityChange}\n                      />\n                    </FormGroup>\n                  </Col>\n                </Row>\n                \n                <Button \n                  color=\"success\" \n                  size=\"lg\" \n                  block\n                  onClick={addToCart}\n                >\n                  Add to Cart\n                </Button>\n              </div>\n            )}\n\n            <div className=\"mt-4\">\n              <Button \n                color=\"secondary\" \n                outline\n                onClick={() => history.push('/products')}\n              >\n                Back to Products\n              </Button>\n            </div>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default ProductDetail;","/home/haresh/Desktop/services/frontend/src/pages/customer/Login.js",[],"/home/haresh/Desktop/services/frontend/src/pages/Products.js",["124"],"import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Card, CardImg, CardBody, CardTitle, CardText, Button, Input, FormGroup, Label } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst Products = () => {\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [search, setSearch] = useState('');\n  const [category, setCategory] = useState('');\n  const [sortBy, setSortBy] = useState('name');\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n\n  useEffect(() => {\n    fetchProducts();\n  }, [search, category, sortBy, page]);\n\n  const fetchProducts = async () => {\n    try {\n      setLoading(true);\n      const params = {\n        page,\n        limit: 12,\n        sort: sortBy,\n        ...(search && { search }),\n        ...(category && { category })\n      };\n\n      const response = await axios.get('/api/products/products', { params });\n      \n      if (response.data.success) {\n        setProducts(response.data.data.products || []);\n        setTotalPages(response.data.data.pagination?.pages || 1);\n      }\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      toast.error('Failed to fetch products');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addToCart = (product) => {\n    const cartItems = JSON.parse(localStorage.getItem('cartItems') || '[]');\n    const existingItem = cartItems.find(item => item._id === product._id);\n    \n    if (existingItem) {\n      existingItem.quantity += 1;\n    } else {\n      cartItems.push({ ...product, quantity: 1 });\n    }\n    \n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n    toast.success('Product added to cart!');\n  };\n\n  const handleSearchChange = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n  };\n\n  const handleCategoryChange = (e) => {\n    setCategory(e.target.value);\n    setPage(1);\n  };\n\n  const handleSortChange = (e) => {\n    setSortBy(e.target.value);\n    setPage(1);\n  };\n\n  return (\n    <Container className=\"py-4\">\n      <Row className=\"mb-4\">\n        <Col>\n          <h2>Products</h2>\n        </Col>\n      </Row>\n\n      <Row className=\"mb-4\">\n        <Col md=\"4\">\n          <FormGroup>\n            <Label for=\"search\">Search Products</Label>\n            <Input\n              type=\"text\"\n              id=\"search\"\n              placeholder=\"Search by name or description...\"\n              value={search}\n              onChange={handleSearchChange}\n            />\n          </FormGroup>\n        </Col>\n        <Col md=\"4\">\n          <FormGroup>\n            <Label for=\"category\">Category</Label>\n            <Input\n              type=\"select\"\n              id=\"category\"\n              value={category}\n              onChange={handleCategoryChange}\n            >\n              <option value=\"\">All Categories</option>\n              <option value=\"electronics\">Electronics</option>\n              <option value=\"clothing\">Clothing</option>\n              <option value=\"books\">Books</option>\n              <option value=\"home\">Home & Garden</option>\n              <option value=\"sports\">Sports</option>\n              <option value=\"beauty\">Beauty</option>\n            </Input>\n          </FormGroup>\n        </Col>\n        <Col md=\"4\">\n          <FormGroup>\n            <Label for=\"sort\">Sort By</Label>\n            <Input\n              type=\"select\"\n              id=\"sort\"\n              value={sortBy}\n              onChange={handleSortChange}\n            >\n              <option value=\"name\">Name</option>\n              <option value=\"price\">Price: Low to High</option>\n              <option value=\"-price\">Price: High to Low</option>\n              <option value=\"-createdAt\">Newest First</option>\n              <option value=\"createdAt\">Oldest First</option>\n            </Input>\n          </FormGroup>\n        </Col>\n      </Row>\n\n      {loading ? (\n        <div className=\"loading-spinner\">\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      ) : (\n        <>\n          <Row>\n            {products.map(product => (\n              <Col md=\"4\" lg=\"3\" key={product._id} className=\"mb-4\">\n                <Card className=\"product-card h-100\">\n                  {product.images && product.images[0] && (\n                    <CardImg \n                      top \n                      width=\"100%\" \n                      src={product.images[0]} \n                      alt={product.name}\n                      style={{ height: '200px', objectFit: 'cover' }}\n                    />\n                  )}\n                  <CardBody className=\"d-flex flex-column\">\n                    <CardTitle tag=\"h6\">{product.name}</CardTitle>\n                    <CardText className=\"text-muted small\">\n                      {product.description?.substring(0, 100)}...\n                    </CardText>\n                    <CardText className=\"h6 text-primary\">\n                      ${product.price}\n                    </CardText>\n                    <CardText className=\"small text-muted\">\n                      Stock: {product.stock}\n                    </CardText>\n                    <div className=\"mt-auto\">\n                      <Button \n                        color=\"primary\" \n                        size=\"sm\" \n                        block\n                        tag={Link} \n                        to={`/product/${product._id}`}\n                        className=\"mb-2\"\n                      >\n                        View Details\n                      </Button>\n                      <Button \n                        color=\"success\" \n                        size=\"sm\" \n                        block\n                        onClick={() => addToCart(product)}\n                        disabled={product.stock === 0}\n                      >\n                        {product.stock === 0 ? 'Out of Stock' : 'Add to Cart'}\n                      </Button>\n                    </div>\n                  </CardBody>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n\n          {products.length === 0 && (\n            <Row>\n              <Col className=\"text-center py-5\">\n                <p className=\"lead\">No products found.</p>\n              </Col>\n            </Row>\n          )}\n\n          {totalPages > 1 && (\n            <Row>\n              <Col className=\"d-flex justify-content-center\">\n                <nav>\n                  <ul className=\"pagination\">\n                    <li className={`page-item ${page === 1 ? 'disabled' : ''}`}>\n                      <Button \n                        color=\"link\" \n                        className=\"page-link\"\n                        onClick={() => setPage(page - 1)}\n                        disabled={page === 1}\n                      >\n                        Previous\n                      </Button>\n                    </li>\n                    {[...Array(totalPages)].map((_, i) => (\n                      <li key={i} className={`page-item ${page === i + 1 ? 'active' : ''}`}>\n                        <Button \n                          color=\"link\" \n                          className=\"page-link\"\n                          onClick={() => setPage(i + 1)}\n                        >\n                          {i + 1}\n                        </Button>\n                      </li>\n                    ))}\n                    <li className={`page-item ${page === totalPages ? 'disabled' : ''}`}>\n                      <Button \n                        color=\"link\" \n                        className=\"page-link\"\n                        onClick={() => setPage(page + 1)}\n                        disabled={page === totalPages}\n                      >\n                        Next\n                      </Button>\n                    </li>\n                  </ul>\n                </nav>\n              </Col>\n            </Row>\n          )}\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default Products;","/home/haresh/Desktop/services/frontend/src/pages/Cart.js",[],"/home/haresh/Desktop/services/frontend/src/pages/seller/Login.js",[],"/home/haresh/Desktop/services/frontend/src/pages/customer/Register.js",[],"/home/haresh/Desktop/services/frontend/src/pages/customer/Profile.js",["125","126"],"import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Card, CardBody, Form, FormGroup, Label, Input, Button, Alert } from 'reactstrap';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst CustomerProfile = () => {\n  const [customer, setCustomer] = useState(null);\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    dateOfBirth: '',\n    gender: 'male'\n  });\n  const [loading, setLoading] = useState(true);\n  const [updating, setUpdating] = useState(false);\n  const [error, setError] = useState('');\n  const history = useHistory();\n\n  useEffect(() => {\n    const token = localStorage.getItem('customerToken');\n    if (!token) {\n      history.push('/customer/login');\n      return;\n    }\n    fetchCustomerProfile();\n  }, [history]);\n\n  const fetchCustomerProfile = async () => {\n    try {\n      const token = localStorage.getItem('customerToken');\n      const response = await axios.get('/api/customer/profile', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      if (response.data.success) {\n        const customerData = response.data.data;\n        setCustomer(customerData);\n        setFormData({\n          firstName: customerData.firstName || '',\n          lastName: customerData.lastName || '',\n          email: customerData.email || '',\n          phone: customerData.phone || '',\n          dateOfBirth: customerData.dateOfBirth ? customerData.dateOfBirth.split('T')[0] : '',\n          gender: customerData.gender || 'male'\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      if (error.response?.status === 401) {\n        localStorage.removeItem('customerToken');\n        history.push('/customer/login');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n    if (error) setError('');\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setUpdating(true);\n    setError('');\n\n    try {\n      const token = localStorage.getItem('customerToken');\n      const response = await axios.put('/api/customer/profile', formData, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      if (response.data.success) {\n        toast.success('Profile updated successfully!');\n        setCustomer(response.data.data);\n      }\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Failed to update profile.';\n      setError(errorMessage);\n      toast.error(errorMessage);\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Container className=\"py-5\">\n        <div className=\"loading-spinner\">\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      </Container>\n    );\n  }\n\n  return (\n    <Container className=\"py-5\">\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <Card>\n            <CardBody>\n              <h2 className=\"text-center mb-4\">My Profile</h2>\n              {error && <Alert color=\"danger\">{error}</Alert>}\n              \n              <Form onSubmit={handleSubmit}>\n                <Row>\n                  <Col md=\"6\">\n                    <FormGroup>\n                      <Label for=\"firstName\">First Name</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"firstName\"\n                        id=\"firstName\"\n                        value={formData.firstName}\n                        onChange={handleChange}\n                        required\n                      />\n                    </FormGroup>\n                  </Col>\n                  <Col md=\"6\">\n                    <FormGroup>\n                      <Label for=\"lastName\">Last Name</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"lastName\"\n                        id=\"lastName\"\n                        value={formData.lastName}\n                        onChange={handleChange}\n                        required\n                      />\n                    </FormGroup>\n                  </Col>\n                </Row>\n                \n                <FormGroup>\n                  <Label for=\"email\">Email</Label>\n                  <Input\n                    type=\"email\"\n                    name=\"email\"\n                    id=\"email\"\n                    value={formData.email}\n                    onChange={handleChange}\n                    disabled\n                  />\n                </FormGroup>\n                \n                <Row>\n                  <Col md=\"6\">\n                    <FormGroup>\n                      <Label for=\"phone\">Phone</Label>\n                      <Input\n                        type=\"tel\"\n                        name=\"phone\"\n                        id=\"phone\"\n                        value={formData.phone}\n                        onChange={handleChange}\n                        required\n                      />\n                    </FormGroup>\n                  </Col>\n                  <Col md=\"6\">\n                    <FormGroup>\n                      <Label for=\"gender\">Gender</Label>\n                      <Input\n                        type=\"select\"\n                        name=\"gender\"\n                        id=\"gender\"\n                        value={formData.gender}\n                        onChange={handleChange}\n                      >\n                        <option value=\"male\">Male</option>\n                        <option value=\"female\">Female</option>\n                        <option value=\"other\">Other</option>\n                      </Input>\n                    </FormGroup>\n                  </Col>\n                </Row>\n                \n                <FormGroup>\n                  <Label for=\"dateOfBirth\">Date of Birth</Label>\n                  <Input\n                    type=\"date\"\n                    name=\"dateOfBirth\"\n                    id=\"dateOfBirth\"\n                    value={formData.dateOfBirth}\n                    onChange={handleChange}\n                    required\n                  />\n                </FormGroup>\n                \n                <Button \n                  color=\"primary\" \n                  type=\"submit\" \n                  block \n                  disabled={updating}\n                >\n                  {updating ? 'Updating...' : 'Update Profile'}\n                </Button>\n              </Form>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default CustomerProfile;","/home/haresh/Desktop/services/frontend/src/pages/seller/Register.js",[],"/home/haresh/Desktop/services/frontend/src/pages/seller/Dashboard.js",["127"],"import React, { useState, useEffect } from 'react';\nimport { Row, Col, Card, CardBody, CardTitle, CardText, Button, Table, Badge } from 'reactstrap';\nimport { useHistory, Link } from 'react-router-dom';\nimport axios from 'axios';\n\nconst SellerDashboard = () => {\n  const [seller, setSeller] = useState(null);\n  const [products, setProducts] = useState([]);\n  const [orders, setOrders] = useState([]);\n  const [stats, setStats] = useState({\n    totalProducts: 0,\n    totalOrders: 0,\n    totalSales: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const history = useHistory();\n\n  useEffect(() => {\n    const token = localStorage.getItem('sellerToken');\n    console.log('Dashboard loading, token:', token ? 'exists' : 'missing');\n    if (!token) {\n      console.log('No token found, redirecting to login');\n      history.push('/seller/login');\n      return;\n    }\n    console.log('Token found, fetching dashboard data');\n    fetchDashboardData();\n  }, [history]);\n\n  const fetchDashboardData = async () => {\n    try {\n      const token = localStorage.getItem('sellerToken');\n      const headers = { Authorization: `Bearer ${token}` };\n      \n      const [sellerRes, productsRes, ordersRes] = await Promise.all([\n        axios.get('http://localhost:3002/api/v1/sellers/profile', { headers }),\n        axios.get('/api/products/products?sellerId=' + JSON.parse(localStorage.getItem('sellerData'))?.id, { headers }),\n        axios.get('/api/orders?sellerId=' + JSON.parse(localStorage.getItem('sellerData'))?.id, { headers })\n      ]);\n\n      if (sellerRes.data.success) {\n        setSeller(sellerRes.data.data);\n      }\n\n      if (productsRes.data.success) {\n        setProducts(productsRes.data.data.products || []);\n        setStats(prev => ({\n          ...prev,\n          totalProducts: (productsRes.data.data.products || []).length\n        }));\n      }\n\n      if (ordersRes.data.success) {\n        setOrders(ordersRes.data.data);\n        const totalSales = ordersRes.data.data\n          .filter(order => order.status === 'delivered')\n          .reduce((sum, order) => sum + order.totalAmount, 0);\n        \n        setStats(prev => ({\n          ...prev,\n          totalOrders: ordersRes.data.data.length,\n          totalSales\n        }));\n      }\n    } catch (error) {\n      console.error('Error fetching dashboard data:', error);\n      console.log('Error details:', error.response?.data);\n      if (error.response?.status === 401) {\n        console.log('401 error, removing token and redirecting');\n        localStorage.removeItem('sellerToken');\n        localStorage.removeItem('sellerData');\n        history.push('/seller/login');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'pending': return 'warning';\n      case 'confirmed': return 'info';\n      case 'shipped': return 'primary';\n      case 'delivered': return 'success';\n      case 'cancelled': return 'danger';\n      default: return 'secondary';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: '400px' }}>\n        <div className=\"spinner-border text-primary\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Row>\n        <Col>\n          <h2 className=\"mb-4\">Seller Dashboard</h2>\n          {seller && (\n            <p className=\"lead\">Welcome back, {seller.businessName}!</p>\n          )}\n        </Col>\n      </Row>\n\n      <Row className=\"mb-4\">\n        <Col md=\"4\">\n          <Card className=\"text-center\">\n            <CardBody>\n              <CardTitle tag=\"h5\">Total Products</CardTitle>\n              <CardText className=\"h3 text-primary\">\n                {stats.totalProducts}\n              </CardText>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col md=\"4\">\n          <Card className=\"text-center\">\n            <CardBody>\n              <CardTitle tag=\"h5\">Total Orders</CardTitle>\n              <CardText className=\"h3 text-info\">\n                {stats.totalOrders}\n              </CardText>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col md=\"4\">\n          <Card className=\"text-center\">\n            <CardBody>\n              <CardTitle tag=\"h5\">Total Sales</CardTitle>\n              <CardText className=\"h3 text-success\">\n                ${stats.totalSales.toFixed(2)}\n              </CardText>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col md=\"6\">\n          <Card>\n            <CardBody>\n              <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                <h5>Recent Products</h5>\n                <Button color=\"primary\" size=\"sm\" tag={Link} to=\"/seller/add-product\">\n                  Add Product\n                </Button>\n              </div>\n              {products.length > 0 ? (\n                <Table responsive size=\"sm\">\n                  <thead>\n                    <tr>\n                      <th>Name</th>\n                      <th>Price</th>\n                      <th>Stock</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {products.slice(0, 5).map(product => (\n                      <tr key={product._id}>\n                        <td>{product.name}</td>\n                        <td>${product.price}</td>\n                        <td>{product.stock}</td>\n                        <td>\n                          <Button\n                            color=\"link\"\n                            size=\"sm\"\n                            tag={Link}\n                            to={`/seller/edit-product/${product._id}`}\n                            className=\"p-0\"\n                          >\n                            Edit\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Table>\n              ) : (\n                <p className=\"text-muted\">No products added yet.</p>\n              )}\n            </CardBody>\n          </Card>\n        </Col>\n\n        <Col md=\"6\">\n          <Card>\n            <CardBody>\n              <h5 className=\"mb-3\">Recent Orders</h5>\n              {orders.length > 0 ? (\n                <Table responsive size=\"sm\">\n                  <thead>\n                    <tr>\n                      <th>Order ID</th>\n                      <th>Amount</th>\n                      <th>Status</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {orders.slice(0, 5).map(order => (\n                      <tr key={order._id}>\n                        <td>{order._id.slice(-8)}</td>\n                        <td>${order.totalAmount}</td>\n                        <td>\n                          <Badge color={getStatusColor(order.status)}>\n                            {order.status}\n                          </Badge>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Table>\n              ) : (\n                <p className=\"text-muted\">No orders received yet.</p>\n              )}\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default SellerDashboard;","/home/haresh/Desktop/services/frontend/src/pages/Home.js",[],"/home/haresh/Desktop/services/frontend/src/components/common/Header.js",[],"/home/haresh/Desktop/services/frontend/src/components/common/Footer.js",[],"/home/haresh/Desktop/services/frontend/src/pages/seller/AddProduct.js",[],"/home/haresh/Desktop/services/frontend/src/pages/seller/EditProduct.js",["128","129","130"],"import React, { useState, useEffect } from 'react';\nimport { Row, Col, Card, CardBody, Form, FormGroup, Label, Input, Button, Alert } from 'reactstrap';\nimport { useHistory, useParams, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport ImageUploader from '../../components/common/ImageUploader';\nimport MultiImageUploader from '../../components/common/MultiImageUploader';\n\nconst EditProduct = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    price: '',\n    category: 'electronics',\n    stock: '',\n    specifications: ''\n  });\n  const [specifications, setSpecifications] = useState([\n    { title: '', detail: '' }\n  ]);\n  const [mainImage, setMainImage] = useState(null);\n  const [otherImages, setOtherImages] = useState([]);\n  const [mainImageIndex, setMainImageIndex] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [fetchingProduct, setFetchingProduct] = useState(true);\n  const [error, setError] = useState('');\n  const [originalMainImageId, setOriginalMainImageId] = useState(null);\n  const [originalOtherImageIds, setOriginalOtherImageIds] = useState([]);\n  const [deletedImageIds, setDeletedImageIds] = useState([]);\n  const history = useHistory();\n  const { id: productId } = useParams();\n\n  useEffect(() => {\n    fetchProduct();\n  }, [productId]);\n\n  const fetchProduct = async () => {\n    try {\n      const token = localStorage.getItem('sellerToken');\n      if (!token) {\n        history.push('/seller/login');\n        return;\n      }\n\n      const response = await axios.get(`/api/products/products/${productId}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      if (response.data.success) {\n        const product = response.data.data;\n        setFormData({\n          name: product.name || '',\n          description: product.description || '',\n          price: product.price || '',\n          category: product.category || 'electronics',\n          stock: product.stock || '',\n          specifications: product.specifications ? JSON.stringify(product.specifications, null, 2) : ''\n        });\n\n        // Convert specifications object to array format\n        if (product.specifications && typeof product.specifications === 'object') {\n          const specsArray = Object.entries(product.specifications).map(([title, detail]) => ({\n            title,\n            detail\n          }));\n          setSpecifications(specsArray.length > 0 ? specsArray : [{ title: '', detail: '' }]);\n        } else {\n          setSpecifications([{ title: '', detail: '' }]);\n        }\n\n        // Set images\n        if (product.images && product.images.length > 0) {\n          // Create image objects from URLs for existing images\n          const imageObjects = product.images.map((url, index) => ({\n            id: `existing-${index}`,\n            url: url,\n            originalFilename: `image-${index + 1}.jpg`\n          }));\n          \n          setMainImage(imageObjects[0]);\n          setOriginalMainImageId(imageObjects[0].id);\n          \n          if (imageObjects.length > 1) {\n            setOtherImages(imageObjects.slice(1));\n            setOriginalOtherImageIds(imageObjects.slice(1).map(img => img.id));\n          } else {\n            setOriginalOtherImageIds([]);\n          }\n        } else {\n          setOriginalMainImageId(null);\n          setOriginalOtherImageIds([]);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching product:', error);\n      toast.error('Failed to fetch product details');\n      if (error.response?.status === 401) {\n        history.push('/seller/login');\n      }\n    } finally {\n      setFetchingProduct(false);\n    }\n  };\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n    if (error) setError('');\n  };\n\n  const handleSpecificationChange = (index, field, value) => {\n    const updatedSpecs = [...specifications];\n    updatedSpecs[index] = {\n      ...updatedSpecs[index],\n      [field]: value\n    };\n    setSpecifications(updatedSpecs);\n  };\n\n  const addSpecification = () => {\n    setSpecifications([...specifications, { title: '', detail: '' }]);\n  };\n\n  const removeSpecification = (index) => {\n    if (specifications.length > 1) {\n      const updatedSpecs = specifications.filter((_, i) => i !== index);\n      setSpecifications(updatedSpecs);\n    }\n  };\n\n  // Track when existing images are deleted\n  const handleMainImageRemove = () => {\n    if (mainImage && mainImage.id && mainImage.id.startsWith('existing-')) {\n      setDeletedImageIds(prev => [...prev, mainImage.id]);\n    }\n    setMainImage(null);\n  };\n\n  const handleOtherImagesChange = (newImages) => {\n    // Find deleted images by comparing with current otherImages\n    const currentIds = otherImages.map(img => img.id);\n    const newIds = newImages.map(img => img.id);\n    \n    const deletedIds = currentIds.filter(id => \n      id.startsWith('existing-') && !newIds.includes(id)\n    );\n    \n    if (deletedIds.length > 0) {\n      setDeletedImageIds(prev => [...prev, ...deletedIds]);\n    }\n    \n    setOtherImages(newImages);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    // Validation\n    if (!mainImage) {\n      setError('Please upload a main product image');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const token = localStorage.getItem('sellerToken');\n      if (!token) {\n        history.push('/seller/login');\n        return;\n      }\n\n      // Prepare images array for the API (URL-based)\n      const images = [];\n      const allImageIds = [];\n      \n      if (mainImage) {\n        images.push({\n          url: mainImage.url,\n          isPrimary: true\n        });\n        if (mainImage.id) {\n          allImageIds.push(mainImage.id);\n        }\n      }\n      \n      otherImages.forEach(image => {\n        if (image && image.url) {\n          images.push({\n            url: image.url,\n            isPrimary: false\n          });\n          if (image.id) {\n            allImageIds.push(image.id);\n          }\n        }\n      });\n\n      // Prepare specifications object\n      const specsObject = {};\n      specifications.forEach(spec => {\n        if (spec.title.trim() && spec.detail.trim()) {\n          specsObject[spec.title.trim()] = spec.detail.trim();\n        }\n      });\n\n      // Prepare product data\n      const productData = {\n        ...formData,\n        price: parseFloat(formData.price),\n        stock: parseInt(formData.stock),\n        images: images,\n        specifications: specsObject\n      };\n\n      const response = await axios.put(`/api/products/products/${productId}`, productData, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      if (response.data.success) {\n        // Mark new images as used in media service (only newly uploaded images)\n        const newImageIds = allImageIds.filter(id => !id.startsWith('existing-'));\n        if (newImageIds.length > 0) {\n          try {\n            await axios.post('http://localhost:3003/api/v1/media/mark-used', {\n              ids: newImageIds\n            });\n          } catch (mediaError) {\n            console.warn('Failed to mark images as used:', mediaError);\n            // Don't fail the product update if marking images fails\n          }\n        }\n\n        // Mark deleted images as not used so they can be cleaned up\n        if (deletedImageIds.length > 0) {\n          // Convert existing-X IDs back to actual media IDs\n          // Since we're using mock IDs for existing images, we need to handle this differently\n          // For now, we'll log this - in a real implementation, you'd need the actual media IDs\n          console.log('Images marked for deletion:', deletedImageIds);\n          \n          try {\n            // Note: This would need actual media IDs, not existing-X mock IDs\n            // You might need to store the actual media IDs when fetching the product\n            // For now, we'll skip this call since existing-X are not real UUIDs\n            // await axios.post('http://localhost:3003/api/v1/media/mark-not-used', {\n            //   ids: deletedImageIds\n            // });\n          } catch (mediaError) {\n            console.warn('Failed to mark deleted images as not used:', mediaError);\n          }\n        }\n\n        toast.success('Product updated successfully!');\n        history.push('/seller/dashboard');\n      }\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Failed to update product. Please try again.';\n      setError(errorMessage);\n      toast.error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (fetchingProduct) {\n    return (\n      <div className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: '400px' }}>\n        <div className=\"text-center\">\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n          <p className=\"mt-2\">Loading product details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Row className=\"justify-content-center\">\n      <Col lg=\"10\" xl=\"8\">\n          <Card>\n            <CardBody>\n              <div className=\"d-flex justify-content-between align-items-center mb-4\">\n                <h2>Edit Product</h2>\n                <Button color=\"secondary\" outline tag={Link} to=\"/seller/dashboard\">\n                  Back to Dashboard\n                </Button>\n              </div>\n              \n              {error && <Alert color=\"danger\">{error}</Alert>}\n              \n              <Form onSubmit={handleSubmit}>\n                <Row>\n                  <Col md=\"8\">\n                    <FormGroup>\n                      <Label for=\"name\">Product Name *</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"name\"\n                        id=\"name\"\n                        placeholder=\"Enter product name\"\n                        value={formData.name}\n                        onChange={handleChange}\n                        required\n                      />\n                    </FormGroup>\n                  </Col>\n                  <Col md=\"4\">\n                    <FormGroup>\n                      <Label for=\"category\">Category *</Label>\n                      <Input\n                        type=\"select\"\n                        name=\"category\"\n                        id=\"category\"\n                        value={formData.category}\n                        onChange={handleChange}\n                        required\n                      >\n                        <option value=\"electronics\">Electronics</option>\n                        <option value=\"clothing\">Clothing</option>\n                        <option value=\"books\">Books</option>\n                        <option value=\"home\">Home & Garden</option>\n                        <option value=\"sports\">Sports</option>\n                        <option value=\"beauty\">Beauty</option>\n                        <option value=\"toys\">Toys</option>\n                        <option value=\"automotive\">Automotive</option>\n                      </Input>\n                    </FormGroup>\n                  </Col>\n                </Row>\n\n                <FormGroup>\n                  <Label for=\"description\">Description</Label>\n                  <Input\n                    type=\"textarea\"\n                    name=\"description\"\n                    id=\"description\"\n                    rows=\"4\"\n                    placeholder=\"Enter product description\"\n                    value={formData.description}\n                    onChange={handleChange}\n                  />\n                </FormGroup>\n\n                <Row>\n                  <Col md=\"6\">\n                    <FormGroup>\n                      <Label for=\"price\">Price * ($)</Label>\n                      <Input\n                        type=\"number\"\n                        name=\"price\"\n                        id=\"price\"\n                        placeholder=\"0.00\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        value={formData.price}\n                        onChange={handleChange}\n                        required\n                      />\n                    </FormGroup>\n                  </Col>\n                  <Col md=\"6\">\n                    <FormGroup>\n                      <Label for=\"stock\">Stock Quantity *</Label>\n                      <Input\n                        type=\"number\"\n                        name=\"stock\"\n                        id=\"stock\"\n                        placeholder=\"0\"\n                        min=\"0\"\n                        value={formData.stock}\n                        onChange={handleChange}\n                        required\n                      />\n                    </FormGroup>\n                  </Col>\n                </Row>\n\n                <FormGroup>\n                  <Label>Main Product Image *</Label>\n                  <ImageUploader\n                    currentImage={mainImage?.url}\n                    onUpload={setMainImage}\n                    onRemove={handleMainImageRemove}\n                    uploadType=\"product\"\n                    accept=\"image/*\"\n                    maxSize={5 * 1024 * 1024}\n                    className=\"mb-3\"\n                  />\n                  <small className=\"text-muted\">Upload the main product image (Required)</small>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label>Additional Product Images</Label>\n                  <MultiImageUploader\n                    images={otherImages}\n                    onImagesChange={handleOtherImagesChange}\n                    maxImages={4}\n                    mainImageIndex={mainImageIndex}\n                    onMainImageChange={setMainImageIndex}\n                    className=\"mb-3\"\n                  />\n                  <small className=\"text-muted\">Upload up to 4 additional images (Optional)</small>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label>Product Specifications</Label>\n                  <div className=\"specifications-table\">\n                    <div className=\"table-responsive\">\n                      <table className=\"table table-bordered\">\n                        <thead className=\"bg-light\">\n                          <tr>\n                            <th>Title</th>\n                            <th>Detail</th>\n                            <th width=\"100\">Action</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {specifications.map((spec, index) => (\n                            <tr key={index}>\n                              <td>\n                                <Input\n                                  type=\"text\"\n                                  placeholder=\"e.g., Brand, Color, Size\"\n                                  value={spec.title}\n                                  onChange={(e) => handleSpecificationChange(index, 'title', e.target.value)}\n                                />\n                              </td>\n                              <td>\n                                <Input\n                                  type=\"text\"\n                                  placeholder=\"e.g., Apple, Red, Large\"\n                                  value={spec.detail}\n                                  onChange={(e) => handleSpecificationChange(index, 'detail', e.target.value)}\n                                />\n                              </td>\n                              <td>\n                                <div className=\"d-flex\">\n                                  {index === specifications.length - 1 && (\n                                    <Button\n                                      color=\"success\"\n                                      size=\"sm\"\n                                      className=\"mr-1\"\n                                      onClick={addSpecification}\n                                      type=\"button\"\n                                    >\n                                      +\n                                    </Button>\n                                  )}\n                                  {specifications.length > 1 && (\n                                    <Button\n                                      color=\"danger\"\n                                      size=\"sm\"\n                                      onClick={() => removeSpecification(index)}\n                                      type=\"button\"\n                                    >\n                                      ×\n                                    </Button>\n                                  )}\n                                </div>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                  <small className=\"text-muted\">Add product specifications as key-value pairs (optional)</small>\n                </FormGroup>\n\n                <hr />\n\n                <div className=\"d-flex justify-content-between\">\n                  <Button \n                    color=\"secondary\" \n                    outline\n                    tag={Link}\n                    to=\"/seller/dashboard\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    color=\"success\" \n                    type=\"submit\" \n                    disabled={loading}\n                    style={{ minWidth: '120px' }}\n                  >\n                    {loading ? 'Updating...' : 'Update Product'}\n                  </Button>\n                </div>\n              </Form>\n            </CardBody>\n          </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default EditProduct;","/home/haresh/Desktop/services/frontend/src/components/common/ImageUploader.js",[],"/home/haresh/Desktop/services/frontend/src/components/common/MultiImageUploader.js",[],"/home/haresh/Desktop/services/frontend/src/components/seller/SellerLayout.js",[],"/home/haresh/Desktop/services/frontend/src/components/seller/SellerSidebar.js",[],"/home/haresh/Desktop/services/frontend/src/components/seller/SellerNavbar.js",[],"/home/haresh/Desktop/services/frontend/src/pages/seller/SellerApp.js",[],"/home/haresh/Desktop/services/frontend/src/pages/seller/ProductsList.js",["131"],"/home/haresh/Desktop/services/frontend/src/pages/seller/OrdersList.js",[],"/home/haresh/Desktop/services/frontend/src/pages/seller/Analytics.js",["132","133","134"],"/home/haresh/Desktop/services/frontend/src/pages/seller/Profile.js",["135"],"import React, { useState, useEffect } from 'react';\nimport { Card, CardBody, Form, FormGroup, Label, Input, Button, Row, Col, Alert } from 'reactstrap';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst SellerProfile = () => {\n  const [profile, setProfile] = useState({\n    name: '',\n    email: '',\n    businessName: '',\n    phone: '',\n    address: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    country: '',\n    description: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [editing, setEditing] = useState(false);\n\n  useEffect(() => {\n    fetchProfile();\n  }, []);\n\n  const fetchProfile = async () => {\n    try {\n      const token = localStorage.getItem('sellerToken');\n      const response = await axios.get('http://localhost:3002/api/v1/sellers/profile', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      if (response.data.success) {\n        setProfile(response.data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      toast.error('Failed to load profile');\n    }\n  };\n\n  const handleChange = (e) => {\n    setProfile({\n      ...profile,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      const token = localStorage.getItem('sellerToken');\n      const response = await axios.put('http://localhost:3002/api/v1/sellers/profile', profile, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      if (response.data.success) {\n        toast.success('Profile updated successfully');\n        setEditing(false);\n        localStorage.setItem('sellerInfo', JSON.stringify(response.data.data));\n      }\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      toast.error('Failed to update profile');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"d-flex justify-content-between align-items-center mb-4\">\n        <h2>Seller Profile</h2>\n        {!editing && (\n          <Button color=\"primary\" onClick={() => setEditing(true)}>\n            Edit Profile\n          </Button>\n        )}\n      </div>\n\n      <Card>\n        <CardBody>\n          <Form onSubmit={handleSubmit}>\n            <Row>\n              <Col md=\"6\">\n                <FormGroup>\n                  <Label for=\"name\">Full Name</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"name\"\n                    id=\"name\"\n                    value={profile.name}\n                    onChange={handleChange}\n                    disabled={!editing}\n                    required\n                  />\n                </FormGroup>\n              </Col>\n              <Col md=\"6\">\n                <FormGroup>\n                  <Label for=\"email\">Email</Label>\n                  <Input\n                    type=\"email\"\n                    name=\"email\"\n                    id=\"email\"\n                    value={profile.email}\n                    onChange={handleChange}\n                    disabled={!editing}\n                    required\n                  />\n                </FormGroup>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col md=\"6\">\n                <FormGroup>\n                  <Label for=\"businessName\">Business Name</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"businessName\"\n                    id=\"businessName\"\n                    value={profile.businessName}\n                    onChange={handleChange}\n                    disabled={!editing}\n                    required\n                  />\n                </FormGroup>\n              </Col>\n              <Col md=\"6\">\n                <FormGroup>\n                  <Label for=\"phone\">Phone Number</Label>\n                  <Input\n                    type=\"tel\"\n                    name=\"phone\"\n                    id=\"phone\"\n                    value={profile.phone}\n                    onChange={handleChange}\n                    disabled={!editing}\n                  />\n                </FormGroup>\n              </Col>\n            </Row>\n\n            <FormGroup>\n              <Label for=\"address\">Address</Label>\n              <Input\n                type=\"text\"\n                name=\"address\"\n                id=\"address\"\n                value={profile.address}\n                onChange={handleChange}\n                disabled={!editing}\n              />\n            </FormGroup>\n\n            <Row>\n              <Col md=\"4\">\n                <FormGroup>\n                  <Label for=\"city\">City</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"city\"\n                    id=\"city\"\n                    value={profile.city}\n                    onChange={handleChange}\n                    disabled={!editing}\n                  />\n                </FormGroup>\n              </Col>\n              <Col md=\"4\">\n                <FormGroup>\n                  <Label for=\"state\">State</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"state\"\n                    id=\"state\"\n                    value={profile.state}\n                    onChange={handleChange}\n                    disabled={!editing}\n                  />\n                </FormGroup>\n              </Col>\n              <Col md=\"4\">\n                <FormGroup>\n                  <Label for=\"zipCode\">ZIP Code</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"zipCode\"\n                    id=\"zipCode\"\n                    value={profile.zipCode}\n                    onChange={handleChange}\n                    disabled={!editing}\n                  />\n                </FormGroup>\n              </Col>\n            </Row>\n\n            <FormGroup>\n              <Label for=\"description\">Business Description</Label>\n              <Input\n                type=\"textarea\"\n                name=\"description\"\n                id=\"description\"\n                rows=\"4\"\n                value={profile.description}\n                onChange={handleChange}\n                disabled={!editing}\n                placeholder=\"Tell customers about your business...\"\n              />\n            </FormGroup>\n\n            {editing && (\n              <div className=\"d-flex justify-content-end\">\n                <Button \n                  color=\"secondary\" \n                  className=\"mr-2\"\n                  onClick={() => {\n                    setEditing(false);\n                    fetchProfile();\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  color=\"success\" \n                  type=\"submit\"\n                  disabled={loading}\n                >\n                  {loading ? 'Saving...' : 'Save Changes'}\n                </Button>\n              </div>\n            )}\n          </Form>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default SellerProfile;","/home/haresh/Desktop/services/frontend/src/pages/seller/Settings.js",["136"],"/home/haresh/Desktop/services/frontend/src/components/common/SecureImage.js",[],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":17,"column":6,"nodeType":"143","endLine":17,"endColumn":10,"suggestions":"144"},{"ruleId":"141","severity":1,"message":"145","line":18,"column":6,"nodeType":"143","endLine":18,"endColumn":38,"suggestions":"146"},{"ruleId":"147","severity":1,"message":"148","line":8,"column":10,"nodeType":"149","messageId":"150","endLine":8,"endColumn":18},{"ruleId":"141","severity":1,"message":"151","line":29,"column":6,"nodeType":"143","endLine":29,"endColumn":15,"suggestions":"152"},{"ruleId":"141","severity":1,"message":"153","line":28,"column":6,"nodeType":"143","endLine":28,"endColumn":15,"suggestions":"154"},{"ruleId":"147","severity":1,"message":"155","line":27,"column":10,"nodeType":"149","messageId":"150","endLine":27,"endColumn":29},{"ruleId":"147","severity":1,"message":"156","line":28,"column":10,"nodeType":"149","messageId":"150","endLine":28,"endColumn":31},{"ruleId":"141","severity":1,"message":"142","line":35,"column":6,"nodeType":"143","endLine":35,"endColumn":17,"suggestions":"157"},{"ruleId":"141","severity":1,"message":"145","line":51,"column":6,"nodeType":"143","endLine":51,"endColumn":52,"suggestions":"158"},{"ruleId":"147","severity":1,"message":"159","line":3,"column":8,"nodeType":"149","messageId":"150","endLine":3,"endColumn":13},{"ruleId":"147","severity":1,"message":"160","line":23,"column":13,"nodeType":"149","messageId":"150","endLine":23,"endColumn":18},{"ruleId":"147","severity":1,"message":"161","line":24,"column":13,"nodeType":"149","messageId":"150","endLine":24,"endColumn":21},{"ruleId":"147","severity":1,"message":"162","line":2,"column":75,"nodeType":"149","messageId":"150","endLine":2,"endColumn":80},{"ruleId":"147","severity":1,"message":"162","line":2,"column":86,"nodeType":"149","messageId":"150","endLine":2,"endColumn":91},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchProduct'. Either include it or remove the dependency array.","ArrayExpression",["165"],"React Hook useEffect has a missing dependency: 'fetchProducts'. Either include it or remove the dependency array.",["166"],"no-unused-vars","'customer' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'fetchCustomerProfile'. Either include it or remove the dependency array.",["167"],"React Hook useEffect has a missing dependency: 'fetchDashboardData'. Either include it or remove the dependency array.",["168"],"'originalMainImageId' is assigned a value but never used.","'originalOtherImageIds' is assigned a value but never used.",["169"],["170"],"'axios' is defined but never used.","'token' is assigned a value but never used.","'sellerId' is assigned a value but never used.","'Alert' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},"Update the dependencies array to be: [fetchProduct, id]",{"range":"183","text":"184"},"Update the dependencies array to be: [search, category, sortBy, page, fetchProducts]",{"range":"185","text":"186"},"Update the dependencies array to be: [fetchCustomerProfile, history]",{"range":"187","text":"188"},"Update the dependencies array to be: [fetchDashboardData, history]",{"range":"189","text":"190"},"Update the dependencies array to be: [fetchProduct, productId]",{"range":"191","text":"192"},"Update the dependencies array to be: [currentPage, fetchProducts, filterStatus, sortBy, sortOrder]",{"range":"193","text":"194"},[631,635],"[fetchProduct, id]",[688,720],"[search, category, sortBy, page, fetchProducts]",[880,889],"[fetchCustomerProfile, history]",[960,969],"[fetchDashboardData, history]",[1365,1376],"[fetchProduct, productId]",[2000,2046],"[currentPage, fetchProducts, filterStatus, sortBy, sortOrder]"]