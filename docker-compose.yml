version: '3.8'

services:
  # ============================================
  # Message Broker Services
  # ============================================
  
  # Zookeeper - Required for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka - Event streaming platform
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka UI - Web interface for Kafka management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_READONLY: 'false'
    depends_on:
      - kafka
      - zookeeper
    networks:
      - microservices-network

  # ============================================
  # Database Services
  # ============================================
  
  # MongoDB - NoSQL database for products, customers, sellers
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    hostname: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: microservices
    volumes:
      - mongodb-data:/data/db
      - ./docker/mongo-init:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # PostgreSQL - Relational database for media and notifications
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: microservices
      POSTGRES_MULTIPLE_DATABASES: media_db,notification_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres-init:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - In-memory cache and session storage
  redis:
    image: redis:7-alpine
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Microservices - Node.js Services
  # ============================================
  
  # API Gateway Service
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    hostname: api-gateway
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      JWT_SECRET: your-jwt-secret-key-change-in-production
      SERVICE_SECRET: your-service-secret-key-change-in-production
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CUSTOMER_SERVICE_URL: http://customer-service:3001
      SELLER_SERVICE_URL: http://seller-service:3002
      PRODUCT_SERVICE_URL: http://products-service:3003
      ORDER_SERVICE_URL: http://orders-service:3004
      MEDIA_SERVICE_URL: http://media-service:80
      NOTIFICATION_SERVICE_URL: http://notification-service:80
      ADMIN_SERVICE_URL: http://admin-service:3007
    depends_on:
      - redis
      - customer-service
      - seller-service
      - products-service
      - orders-service
    networks:
      - microservices-network
    restart: unless-stopped

  # Customer Service
  customer-service:
    build:
      context: ./backend/customer
      dockerfile: Dockerfile
    container_name: customer-service
    hostname: customer-service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      MONGODB_URI: mongodb://admin:admin123@mongodb:27017/customer_db?authSource=admin
      JWT_SECRET: your-jwt-secret-key-change-in-production
      SERVICE_SECRET: your-service-secret-key-change-in-production
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:29092
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  # Seller Service
  seller-service:
    build:
      context: ./backend/seller
      dockerfile: Dockerfile
    container_name: seller-service
    hostname: seller-service
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: production
      PORT: 3002
      MONGODB_URI: mongodb://admin:admin123@mongodb:27017/seller_db?authSource=admin
      JWT_SECRET: your-jwt-secret-key-change-in-production
      SERVICE_SECRET: your-service-secret-key-change-in-production
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:29092
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  # Products Service
  products-service:
    build:
      context: ./backend/products
      dockerfile: Dockerfile
    container_name: products-service
    hostname: products-service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: production
      PORT: 3003
      MONGODB_URI: mongodb://admin:admin123@mongodb:27017/products_db?authSource=admin
      SERVICE_SECRET: your-service-secret-key-change-in-production
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:29092
      MEDIA_SERVICE_URL: http://media-service:80
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  # Orders Service
  orders-service:
    build:
      context: ./backend/orders
      dockerfile: Dockerfile
    container_name: orders-service
    hostname: orders-service
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: production
      PORT: 3004
      MONGODB_URI: mongodb://admin:admin123@mongodb:27017/orders_db?authSource=admin
      JWT_SECRET: your-jwt-secret-key-change-in-production
      SERVICE_SECRET: your-service-secret-key-change-in-production
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:29092
      PRODUCT_SERVICE_URL: http://products-service:3003
      CUSTOMER_SERVICE_URL: http://customer-service:3001
      NOTIFICATION_SERVICE_URL: http://notification-service:80
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  # Admin Service
  admin-service:
    build:
      context: ./backend/admin
      dockerfile: Dockerfile
    container_name: admin-service
    hostname: admin-service
    ports:
      - "3007:3007"
    environment:
      NODE_ENV: production
      PORT: 3007
      MONGODB_URI: mongodb://admin:admin123@mongodb:27017/admin_db?authSource=admin
      JWT_SECRET: your-jwt-secret-key-change-in-production
      SERVICE_SECRET: your-service-secret-key-change-in-production
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:29092
      CUSTOMER_SERVICE_URL: http://customer-service:3001
      SELLER_SERVICE_URL: http://seller-service:3002
      PRODUCT_SERVICE_URL: http://products-service:3003
      ORDER_SERVICE_URL: http://orders-service:3004
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  # ============================================
  # Microservices - PHP Services
  # ============================================
  
  # Media Service (PHP)
  media-service:
    build:
      context: ./backend/media
      dockerfile: Dockerfile
    container_name: media-service
    hostname: media-service
    ports:
      - "3005:80"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: media_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      UPLOAD_MAX_SIZE: 10485760
      UPLOAD_PATH: /var/www/uploads
      THUMBNAIL_WIDTH: 300
      THUMBNAIL_HEIGHT: 300
      ALLOWED_TYPES: image/jpeg,image/png,image/gif,image/webp
    volumes:
      - media-uploads:/var/www/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  # Notification Service (PHP)
  notification-service:
    build:
      context: ./backend/notifications
      dockerfile: Dockerfile
    container_name: notification-service
    hostname: notification-service
    ports:
      - "3006:80"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: notification_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_SECURE: tls
      SMTP_USER: your-email@gmail.com
      SMTP_PASS: your-app-password
      SMTP_FROM_NAME: Microservices Platform
      SMTP_FROM_EMAIL: noreply@microservices.com
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  # ============================================
  # Frontend Services
  # ============================================
  
  # React Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:3000
        REACT_APP_MEDIA_URL: http://localhost:3005
    container_name: frontend
    hostname: frontend
    ports:
      - "3008:80"
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: http://localhost:3000
      REACT_APP_MEDIA_URL: http://localhost:3005
      REACT_APP_ENV: production
    depends_on:
      - api-gateway
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # Monitoring & Management Services (Optional)
  # ============================================
  
  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/sites-available:/etc/nginx/sites-available
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api-gateway
    networks:
      - microservices-network
    restart: unless-stopped

# ============================================
# Networks Configuration
# ============================================
networks:
  microservices-network:
    name: microservices-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================
# Volumes Configuration
# ============================================
volumes:
  # Database volumes
  mongodb-data:
    name: mongodb-data
  postgres-data:
    name: postgres-data
  redis-data:
    name: redis-data
  
  # Kafka volumes
  zookeeper-data:
    name: zookeeper-data
  zookeeper-logs:
    name: zookeeper-logs
  kafka-data:
    name: kafka-data
  
  # Application volumes
  media-uploads:
    name: media-uploads